---
title: "mini.animate documentation"
toc-depth: 5
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.animate" href="mini-animate.qmd#mini.animate"><b>mini.animate</b></a> Animate common Neovim actions

MIT License Copyright (c) 2022 Evgeni Chasnovski

---

### Module {#minianimate}

Features:

- Works out of the box with a single `require('mini.animate').setup()`.
  No extra mappings or commands needed.


- Animate cursor movement inside same buffer by showing customizable path.
  See [`MiniAnimate.config.cursor`](mini-animate.qmd#minianimate.config.cursor) for more details.


- Animate scrolling with a series of subscrolls ("smooth scrolling").
  See [`MiniAnimate.config.scroll`](mini-animate.qmd#minianimate.config.scroll) for more details.


- Animate window resize by gradually changing sizes of all windows.
  See [`MiniAnimate.config.resize`](mini-animate.qmd#minianimate.config.resize) for more details.


- Animate window open/close with visually updating floating window.
  See [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open) and [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close) for more details.


- Timings for all actions can be customized independently.
  See [`MiniAnimate-timing`](mini-animate.qmd#minianimate-timing) for more details.


- Action animations can be enabled/disabled independently.


- All animations are asynchronous/non-blocking and trigger a targeted event
  which can be used to perform actions after animation is done.


- [`MiniAnimate.animate()`](mini-animate.qmd#minianimate.animate) function which can be used to perform own animations.

Notes:

- Cursor movement is animated inside same window and buffer, not as cursor
  moves across the screen.


- Scroll and resize animations are done with "side effects": they actually
  change the state of what is animated (window view and sizes
  respectively). This has a downside of possibly needing extra work to
  account for asynchronous nature of animation (like adjusting certain
  mappings, etc.). See [`MiniAnimate.config.scroll`](mini-animate.qmd#minianimate.config.scroll) and
  [`MiniAnimate.config.resize`](mini-animate.qmd#minianimate.config.resize) for more details.

#### Setup {#minianimate-setup}


This module needs a setup with `require('mini.animate').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniAnimate`
which you can use for scripting or manually (with `:lua MiniAnimate.*`).

See [`MiniAnimate.config`](mini-animate.qmd#minianimate.config) for available config settings.

You can override runtime config settings (like `config.modifiers`) locally
to buffer inside `vim.b.minianimate_config` which should have same structure
as `MiniAnimate.config`. See [`mini.nvim-buffer-local-config`](mini-nvim.qmd#mini.nvim-buffer-local-config) for more details.

#### Comparisons {#minianimate-comparisons}



- [Neovide](https://neovide.dev/):

    - Neovide is a standalone GUI which has more control over its animations.
      While 'mini.animate' works inside terminal emulator (with all its
      limitations, like lack of pixel-size control over animations).

    - Neovide animates cursor movement across screen, while 'mini.animate' -
      as it moves across same buffer.

    - Neovide has fixed number of animation effects per action, while
      'mini.animate' is fully customizable.

    - 'mini.animate' implements animations for window open/close, while
      Neovide does not.

- [edluffy/specs.nvim](https://github.com/edluffy/specs.nvim):

    - 'mini.animate' approaches cursor movement visualization via
      customizable path function (uses extmarks), while 'specs.nvim' can
      customize within its own visual effects (shading and floating
      window resizing).

- [karb94/neoscroll.nvim](https://github.com/karb94/neoscroll.nvim):

    - Scroll animation is triggered only inside dedicated mappings.
      'mini.animate' animates scroll resulting from any window view change.

- [anuvyklack/windows.nvim](https://github.com/anuvyklack/windows.nvim):

    - Resize animation is done only within custom commands and mappings,
      while 'mini.animate' animates any resize with appropriate values of
      'winheight' / 'winwidth' and 'winminheight' / 'winminwidth').

#### Highlight groups {#minianimate-highlightgroups}



- `MiniAnimateCursor` - highlight of cursor during its animated movement.

- `MiniAnimateNormalFloat` - highlight of floating window for `open` and
  `close` animations.

To change any highlight group, set it directly with [`nvim_set_hl()`](https://neovim.io/doc/user/helptag.html?tag=nvim_set_hl\(\)).

#### Disabling {#minianimate-disabling}


To disable, set `vim.g.minianimate_disable` (globally) or
`vim.b.minianimate_disable` (for a buffer) to `true`. Considering high
number of different scenarios and customization intentions, writing exact
rules for disabling module's functionality is left to user. See
[`mini.nvim-disabling-recipes`](mini-nvim.qmd#mini.nvim-disabling-recipes) for common recipes.

---

### setup() {#minianimate.setup}

<p align="center">`MiniAnimate.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minianimate.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [`MiniAnimate.config`](mini-animate.qmd#minianimate.config).

#### Usage {#minianimate.setup-usage}



  ```lua
  require('mini.animate').setup() -- use default config
  -- OR
  require('mini.animate').setup({}) -- replace {} with your config table
  ```

---

### config {#minianimate.config}

<p align="center">`MiniAnimate.config`</p>
#### Defaults {#minianimate.config-defaults}



  ```lua
  MiniAnimate.config = {
    -- Cursor path
    cursor = {
      -- Whether to enable this animation
      enable = true,

      -- Timing of animation (how steps will progress in time)
      timing = --<function: linear animation, total 250ms>,

      -- Path generator for visualized cursor movement
      path = --<function: implements shortest line path no longer than 1000>,
    },

    -- Vertical scroll
    scroll = {
      -- Whether to enable this animation
      enable = true,

      -- Timing of animation (how steps will progress in time)
      timing = --<function: linear animation, total 250ms>,

      -- Subscroll generator based on total scroll
      subscroll = --<function: implements equal scroll with at most 60 steps>,
    },

    -- Window resize
    resize = {
      -- Whether to enable this animation
      enable = true,

      -- Timing of animation (how steps will progress in time)
      timing = --<function: linear animation, total 250ms>,

      -- Subresize generator for all steps of resize animations
      subresize = --<function: implements equal linear steps>,
    },

    -- Window open
    open = {
      -- Whether to enable this animation
      enable = true,

      -- Timing of animation (how steps will progress in time)
      timing = --<function: linear animation, total 250ms>,

      -- Floating window config generator visualizing specific window
      winconfig = --<function: implements static window for 25 steps>,

      -- 'winblend' (window transparency) generator for floating window
      winblend = --<function: implements equal linear steps from 80 to 100>,
    },

    -- Window close
    close = {
      -- Whether to enable this animation
      enable = true,

      -- Timing of animation (how steps will progress in time)
      timing = --<function: linear animation, total 250ms>,

      -- Floating window config generator visualizing specific window
      winconfig = --<function: implements static window for 25 steps>,

      -- 'winblend' (window transparency) generator for floating window
      winblend = --<function: implements equal linear steps from 80 to 100>,
    },
  }
  ```

#### General {#minianimate.config-general}



- <a name="minianimate-timing" href="mini-animate.qmd#minianimate-timing"><b>MiniAnimate-timing</b></a> Every animation is a non-blockingly scheduled series of
  specific actions. They are executed in a sequence of timed steps controlled
  by `timing` option. It is a callable which, given next and total step numbers,
  returns wait time (in ms).
  See [`MiniAnimate.gen_timing`](mini-animate.qmd#minianimate.gen_timing) for builtin timing functions.
  See [`MiniAnimate.animate()`](mini-animate.qmd#minianimate.animate) for more details about animation process.


- Every animation can be enabled/disabled independently by setting `enable`
  option to `true`/`false`.


- <a name="minianimate-done-event" href="mini-animate.qmd#minianimate-done-event"><b>MiniAnimate-done-event</b></a> Every animation triggers custom [`User`](https://neovim.io/doc/user/helptag.html?tag=User) event when it
  is finished. It is named `MiniAnimateDoneXxx` with `Xxx` replaced by capitalized
  supported animation action name (like `MiniAnimateDoneCursor`). Use it to
  schedule some action after certain animation is completed. Alternatively,
  you can use [`MiniAnimate.execute_after()`](mini-animate.qmd#minianimate.execute_after) (usually preferred in mappings).


- Each animation has its main step generator which defines how particular
  animation is done. They all are callables which take some input data and
  return an array of step data. Length of that array determines number of
  animation steps. Outputs `nil` and empty table result in no animation.

#### Cursor {#minianimate.config-cursor}


<a name="minianimate.config.cursor" href="mini-animate.qmd#minianimate.config.cursor"><b>MiniAnimate.config.cursor</b></a>

This animation is triggered for each movement of cursor inside same window
and buffer. Its visualization step consists from placing single extmark (see
[`extmarks`](https://neovim.io/doc/user/helptag.html?tag=extmarks)) at certain position. This extmark contains single space and is
highlighted with `MiniAnimateCursor` highlight group.

Exact places of extmark and their number is controlled by `path` option. It
is a callable which takes `destination` argument (2d integer point in
`(line, col)` coordinates) and returns array of relative to `(0, 0)` places
for extmark to be placed. Example:

- Input `(2, -3)` means cursor jumped 2 lines forward and 3 columns backward.

- Output `{ {0, 0 }, { 0, -1 }, { 0, -2 }, { 0, -3 }, { 1, -3 } }` means
  that path is first visualized along the initial line and then along final
  column.

See [`MiniAnimate.gen_path`](mini-animate.qmd#minianimate.gen_path) for builtin path generators.

Notes:

- Input `destination` value is computed ignoring folds. This is by design
  as it helps better visualize distance between two cursor positions.

- Outputs of path generator resulting in a place where extmark can't be
  placed are silently omitted during animation: this step won't show any
  visualization.

Configuration example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    cursor = {
      -- Animate for 200 milliseconds with linear easing
      timing = animate.gen_timing.linear({ duration = 200, unit = 'total' }),

      -- Animate with shortest line for any cursor move
      path = animate.gen_path.line({
        predicate = function() return true end,
      }),
    }
  })
  ```

After animation is done, `MiniAnimateDoneCursor` event is triggered.

#### Scroll {#minianimate.config-scroll}


<a name="minianimate.config.scroll" href="mini-animate.qmd#minianimate.config.scroll"><b>MiniAnimate.config.scroll</b></a>

This animation is triggered for each vertical scroll of current window.
Its visualization step consists from performing a small subscroll which all
in total will result into needed total scroll.

Exact subscroll values and their number is controlled by `subscroll` option.
It is a callable which takes `total_scroll` argument (single non-negative
integer) and returns array of non-negative integers each representing the
amount of lines needed to be scrolled inside corresponding step. All
subscroll values should sum to input `total_scroll`.
Example:

- Input `5` means that total scroll consists from 5 lines (either up or down,
  which doesn't matter).

- Output of `{ 1, 1, 1, 1, 1 }` means that there are 5 equal subscrolls.

See [`MiniAnimate.gen_subscroll`](mini-animate.qmd#minianimate.gen_subscroll) for builtin subscroll generators.

Notes:

- Input value of `total_scroll` is computed taking folds into account.

- As scroll animation is essentially a precisely scheduled non-blocking
  subscrolls, this has two important interconnected consequences:

    - If another scroll is attempted during the animation, it is done based
      on the currently visible window view. Example: if user presses
      [`CTRL-D`](https://neovim.io/doc/user/helptag.html?tag=CTRL-D) and then [`CTRL-U`](https://neovim.io/doc/user/helptag.html?tag=CTRL-U) when animation is half done, window will not
      display the previous view half of 'scroll' above it. This especially
      affects mouse wheel scrolling, as each its turn results in a new scroll
      for number of lines defined by 'mousescroll'. Tweak it to your liking.

    - It breaks the use of several relative scrolling commands in the same
      command. Use [`MiniAnimate.execute_after()`](mini-animate.qmd#minianimate.execute_after) to schedule action after
      reaching target window view.
      Example: a useful `nnoremap n nzvzz` mapping (consecutive application
      of [`n`](https://neovim.io/doc/user/helptag.html?tag=n), [`zv`](https://neovim.io/doc/user/helptag.html?tag=zv), and [`zz`](https://neovim.io/doc/user/helptag.html?tag=zz)) should be expressed in the following way:

        ```lua
        '<Cmd>lua vim.cmd("normal! n"); ' ..
          'MiniAnimate.execute_after("scroll", "normal! zvzz")<CR>'
        ```


- Default timing might conflict with scrolling via holding a key (like `j` or `k`
  with 'wrap' enabled) due to high key repeat rate: next scroll is done before
  first step of current one finishes. Resolve this by not scrolling like that
  or by ensuring maximum value of step duration to be lower than between
  repeated keys: set timing like `function(_, n) return math.min(250/n, 10) end`
  or use timing with constant step duration.

Configuration example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    scroll = {
      -- Animate for 200 milliseconds with linear easing
      timing = animate.gen_timing.linear({ duration = 200, unit = 'total' }),

      -- Animate equally but with at most 120 steps instead of default 60
      subscroll = animate.gen_subscroll.equal({ max_output_steps = 120 }),
    }
  })
  ```

After animation is done, `MiniAnimateDoneScroll` event is triggered.

#### Resize {#minianimate.config-resize}


<a name="minianimate.config.resize" href="mini-animate.qmd#minianimate.config.resize"><b>MiniAnimate.config.resize</b></a>

This animation is triggered for window resize while having same layout of
same windows. For example, it won't trigger when window is opened/closed or
after something like [`CTRL-W_K`](https://neovim.io/doc/user/helptag.html?tag=CTRL-W_K). Its visualization step consists from setting
certain sizes to all visible windows (last step being for "true" final sizes).

Exact window step sizes and their number is controlled by `subresize` option.
It is a callable which takes `sizes_from` and `sizes_to` arguments (both
tables with window id as keys and dimension table as values) and returns
array of same shaped data.
Example:

- Input:

  ```lua
  -- First
  { [1000] = {width = 7, height = 5}, [1001] = {width = 7, height = 10} }
  -- Second
  { [1000] = {width = 9, height = 5}, [1001] = {width = 5, height = 10} }
  -- Means window 1000 increased its width by 2 in expense of window 1001
  ```


- The following output demonstrates equal resizing:

  ```lua
  {
    { [1000] = {width = 8, height = 5}, [1001] = {width = 6, height = 10} },
    { [1000] = {width = 9, height = 5}, [1001] = {width = 5, height = 10} },
  }
  ```

See [`MiniAnimate.gen_subresize`](mini-animate.qmd#minianimate.gen_subresize) for builtin subresize generators.

Notes:


- As resize animation is essentially a precisely scheduled non-blocking
  subresizes, this has two important interconnected consequences:

    - If another resize is attempted during the animation, it is done based
      on the currently visible window sizes. This might affect relative
      resizing.

    - It breaks the use of several relative resizing commands in the same
      command. Use [`MiniAnimate.execute_after()`](mini-animate.qmd#minianimate.execute_after) to schedule action after
      reaching target window sizes.

Configuration example:

  ```lua
  local is_many_wins = function(sizes_from, sizes_to)
    return vim.tbl_count(sizes_from) >= 3
  end
  local animate = require('mini.animate')
  animate.setup({
    resize = {
      -- Animate for 200 milliseconds with linear easing
      timing = animate.gen_timing.linear({ duration = 200, unit = 'total' }),

      -- Animate only if there are at least 3 windows
      subresize = animate.gen_subscroll.equal({ predicate = is_many_wins }),
    }
  })
  ```

After animation is done, `MiniAnimateDoneResize` event is triggered.

#### Window open/close {#minianimate.config-windowopenclose}


<a name="minianimate.config.open" href="mini-animate.qmd#minianimate.config.open"><b>MiniAnimate.config.open</b></a>
<a name="minianimate.config.close" href="mini-animate.qmd#minianimate.config.close"><b>MiniAnimate.config.close</b></a>

These animations are similarly triggered for regular (non-floating) window
open/close. Their visualization step consists from drawing empty floating
window with customizable config and transparency.

Exact window visualization characteristics are controlled by `winconfig`
and `winblend` options.

The `winconfig` option is a callable which takes window id ([`window-ID`](https://neovim.io/doc/user/helptag.html?tag=window-ID)) as
input and returns an array of floating window configs (as in `config`
argument of [`nvim_open_win()`](https://neovim.io/doc/user/helptag.html?tag=nvim_open_win\(\))). Its length determines number of animation steps.
Example:

- The following output results into two animation steps with second being
  upper left quarter of a first:

  ```lua
  {
    {
      row      = 0,        col    = 0,
      width    = 10,       height = 10,
      relative = 'editor', anchor = 'NW',   focusable = false,
      zindex   = 1,        border = 'none', style  = 'minimal',
    },
    {
      row      = 0,        col    = 0,
      width    = 5,        height = 5,
      relative = 'editor', anchor = 'NW',   focusable = false,
      zindex   = 1,        border = 'none', style  = 'minimal',
    },
  }
  ```

The `winblend` option is similar to `timing` option: it is a callable
which, given current and total step numbers, returns value of floating
window's 'winblend' option. Note, that it is called for current step (so
starts from 0), as opposed to `timing` which is called before step.
Example:

- Function `function(s, n) return 80 + 20 * s / n end` results in linear
  transition from `winblend` value of 80 to 100.

See [`MiniAnimate.gen_winconfig`](mini-animate.qmd#minianimate.gen_winconfig) for builtin window config generators.
See [`MiniAnimate.gen_winblend`](mini-animate.qmd#minianimate.gen_winblend) for builtin window transparency generators.

Configuration example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    open = {
      -- Animate for 400 milliseconds with linear easing
      timing = animate.gen_timing.linear({ duration = 400, unit = 'total' }),

      -- Animate with wiping from nearest edge instead of default static one
      winconfig = animate.gen_winconfig.wipe({ direction = 'from_edge' }),

      -- Make bigger windows more transparent
      winblend = animate.gen_winblend.linear({ from = 80, to = 100 }),
    },

    close = {
      -- Animate for 400 milliseconds with linear easing
      timing = animate.gen_timing.linear({ duration = 400, unit = 'total' }),

      -- Animate with wiping to nearest edge instead of default static one
      winconfig = animate.gen_winconfig.wipe({ direction = 'to_edge' }),

      -- Make bigger windows more transparent
      winblend = animate.gen_winblend.linear({ from = 100, to = 80 }),
    },
  })
  ```

After animation is done, `MiniAnimateDoneOpen` or `MiniAnimateDoneClose`
event is triggered for `open` and `close` animation respectively.

---

### is_active() {#minianimate.is_active}

<p align="center">`MiniAnimate.is_active`(<span class="help-syntax-special">{animation_type}</span>)</p>
Check animation activity

#### Parameters {#minianimate.is_active-parameters}



<span class="help-syntax-special">{animation_type}</span> `(string)` One of supported animation types
  (entries of [`MiniAnimate.config`](mini-animate.qmd#minianimate.config), like `'cursor'`, etc.).

#### Return {#minianimate.is_active-return}


`(boolean)` Whether the animation is currently active.

---

### execute_after() {#minianimate.execute_after}

<p align="center">`MiniAnimate.execute_after`(<span class="help-syntax-special">{animation_type}</span>, <span class="help-syntax-special">{action}</span>)</p>
Execute action after some animation is done

Execute action immediately if animation is not active (checked with
[`MiniAnimate.is_active()`](mini-animate.qmd#minianimate.is_active)). Else, schedule its execution until after
animation is done (on corresponding "done event", see
[`MiniAnimate-done-event`](mini-animate.qmd#minianimate-done-event)).

Mostly meant to be used inside mappings.

Example:

A useful `nnoremap n nzvzz` mapping (consecutive application of [`n`](https://neovim.io/doc/user/helptag.html?tag=n), [`zv`](https://neovim.io/doc/user/helptag.html?tag=zv), and [`zz`](https://neovim.io/doc/user/helptag.html?tag=zz))
should be expressed in the following way:

  ```lua
  '<Cmd>lua vim.cmd("normal! n"); ' ..
    'MiniAnimate.execute_after("scroll", "normal! zvzz")<CR>'
  ```

#### Parameters {#minianimate.execute_after-parameters}



<span class="help-syntax-special">{animation_type}</span> `(string)` One of supported animation types
  (as in [`MiniAnimate.is_active()`](mini-animate.qmd#minianimate.is_active)).

<span class="help-syntax-special">{action}</span> `(string|function)` Action to be executed. If string, executed as
  command (via [`vim.cmd()`](https://neovim.io/doc/user/helptag.html?tag=vim.cmd\(\))).

---

### animate() {#minianimate.animate}

<p align="center">`MiniAnimate.animate`(<span class="help-syntax-special">{step_action}</span>, <span class="help-syntax-special">{step_timing}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Animate action

This is equivalent to asynchronous execution of the following algorithm:

- Call `step_action(0)` immediately after calling this function. Stop if
  action returned `false` or `nil`.

- Wait `step_timing(1)` milliseconds.

- Call `step_action(1)`. Stop if it returned `false` or `nil`.

- Wait `step_timing(2)` milliseconds.

- Call `step_action(2)`. Stop if it returned `false` or `nil`.

- ...

Notes:

- Animation is also stopped on action error or if maximum number of steps
  is reached.

- Asynchronous execution is done with [`uv.new_timer()`](https://neovim.io/doc/user/helptag.html?tag=uv.new_timer\(\)). It only allows
  integer parts as repeat value. This has several implications:

    - Outputs of `step_timing()` are accumulated in order to preserve total
      execution time.

    - Any wait time less than 1 ms means that action will be executed
      immediately.

#### Parameters {#minianimate.animate-parameters}



<span class="help-syntax-special">{step_action}</span> `(function|table)` Callable which takes `step` (integer 0, 1, 2,
  etc. indicating current step) and executes some action. Its return value
  defines when animation should stop: values `false` and `nil` (equivalent
  to no explicit return) stop animation timer; any other continues it.

<span class="help-syntax-special">{step_timing}</span> `(function|table)` Callable which takes `step` (integer 1, 2, etc.
  indicating next step) and returns how many milliseconds to wait before
  executing this step action.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<max_steps\></span> - Maximum value of allowed step to execute. Default: 10000000.

---

### gen_timing {#minianimate.gen_timing}

<p align="center">`MiniAnimate.gen_timing`</p>
Generate animation timing

Each field corresponds to one family of progression which can be customized
further by supplying appropriate arguments.

This is a table with function elements. Call to actually get timing function.

Example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    cursor = {
      timing = animate.gen_timing.linear({ duration = 100, unit = 'total' })
    },
  })
  ```

#### See also {#minianimate.gen_timing-seealso}


[`MiniIndentscope.gen_animation`](mini-indentscope.qmd#miniindentscope.gen_animation) for similar concept in 'mini.indentscope'.

---

### gen_timing.none() {#minianimate.gen_timing.none}

<p align="center">`MiniAnimate.gen_timing.none`()</p>
Generate timing with no animation

Show final result immediately. Usually better to use `enable` field in `config`
if you want to disable animation.

---

### gen_timing.linear() {#minianimate.gen_timing.linear}

<p align="center">`MiniAnimate.gen_timing.linear`(<span class="help-syntax-special">{opts}</span>)</p>
Generate timing with linear progression

#### Parameters {#minianimate.gen_timing.linear-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#minianimate.gen_timing.linear-return}


`(function)` Timing function (see [`MiniAnimate-timing`](mini-animate.qmd#minianimate-timing)).

---

### gen_timing.quadratic() {#minianimate.gen_timing.quadratic}

<p align="center">`MiniAnimate.gen_timing.quadratic`(<span class="help-syntax-special">{opts}</span>)</p>
Generate timing with quadratic progression

#### Parameters {#minianimate.gen_timing.quadratic-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#minianimate.gen_timing.quadratic-return}


`(function)` Timing function (see [`MiniAnimate-timing`](mini-animate.qmd#minianimate-timing)).

---

### gen_timing.cubic() {#minianimate.gen_timing.cubic}

<p align="center">`MiniAnimate.gen_timing.cubic`(<span class="help-syntax-special">{opts}</span>)</p>
Generate timing with cubic progression

#### Parameters {#minianimate.gen_timing.cubic-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#minianimate.gen_timing.cubic-return}


`(function)` Timing function (see [`MiniAnimate-timing`](mini-animate.qmd#minianimate-timing)).

---

### gen_timing.quartic() {#minianimate.gen_timing.quartic}

<p align="center">`MiniAnimate.gen_timing.quartic`(<span class="help-syntax-special">{opts}</span>)</p>
Generate timing with quartic progression

#### Parameters {#minianimate.gen_timing.quartic-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#minianimate.gen_timing.quartic-return}


`(function)` Timing function (see [`MiniAnimate-timing`](mini-animate.qmd#minianimate-timing)).

---

### gen_timing.exponential() {#minianimate.gen_timing.exponential}

<p align="center">`MiniAnimate.gen_timing.exponential`(<span class="help-syntax-special">{opts}</span>)</p>
Generate timing with exponential progression

#### Parameters {#minianimate.gen_timing.exponential-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#minianimate.gen_timing.exponential-return}


`(function)` Timing function (see [`MiniAnimate-timing`](mini-animate.qmd#minianimate-timing)).

---

### gen_path {#minianimate.gen_path}

<p align="center">`MiniAnimate.gen_path`</p>
Generate cursor animation path

For more information see [`MiniAnimate.config.cursor`](mini-animate.qmd#minianimate.config.cursor).

This is a table with function elements. Call to actually get generator.

Example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    cursor = {
      -- Animate with line-column angle instead of shortest line
      path = animate.gen_path.angle(),
    }
  })
  ```

---

### gen_path.line() {#minianimate.gen_path.line}

<p align="center">`MiniAnimate.gen_path.line`(<span class="help-syntax-special">{opts}</span>)</p>
Generate path as shortest line

#### Parameters {#minianimate.gen_path.line-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `destination` as input and
    returns boolean value indicating whether animation should be done.
    Default: `false` if `destination` is within one line of origin (reduces
    flickering), `true` otherwise.

  - <span class="help-syntax-keys">\<max_output_steps\></span> `(number)` - maximum number of steps in output.
    Default: 1000.

#### Return {#minianimate.gen_path.line-return}


`(function)` Path function (see [`MiniAnimate.config.cursor`](mini-animate.qmd#minianimate.config.cursor)).

---

### gen_path.angle() {#minianimate.gen_path.angle}

<p align="center">`MiniAnimate.gen_path.angle`(<span class="help-syntax-special">{opts}</span>)</p>
Generate path as line/column angle

#### Parameters {#minianimate.gen_path.angle-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `destination` as input and
    returns boolean value indicating whether animation should be done.
    Default: `false` if `destination` is within one line of origin (reduces
    flickering), `true` otherwise.

  - <span class="help-syntax-keys">\<max_output_steps\></span> `(number)` - maximum number of steps per side in output.
    Default: 1000.

  - <span class="help-syntax-keys">\<first_direction\></span> `(string)` - one of `"horizontal"` (default; animates
    across initial line first) or `"vertical"` (animates across initial
    column first).

#### Return {#minianimate.gen_path.angle-return}


`(function)` Path function (see [`MiniAnimate.config.cursor`](mini-animate.qmd#minianimate.config.cursor)).

---

### gen_path.walls() {#minianimate.gen_path.walls}

<p align="center">`MiniAnimate.gen_path.walls`(<span class="help-syntax-special">{opts}</span>)</p>
Generate path as closing walls at final position

#### Parameters {#minianimate.gen_path.walls-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `destination` as input and
    returns boolean value indicating whether animation should be done.
    Default: `false` if `destination` is within one line of origin (reduces
    flickering), `true` otherwise.

  - <span class="help-syntax-keys">\<width\></span> `(number)` - initial width of left and right walls. Default: 10.

#### Return {#minianimate.gen_path.walls-return}


`(function)` Path function (see [`MiniAnimate.config.cursor`](mini-animate.qmd#minianimate.config.cursor)).

---

### gen_path.spiral() {#minianimate.gen_path.spiral}

<p align="center">`MiniAnimate.gen_path.spiral`(<span class="help-syntax-special">{opts}</span>)</p>
Generate path as diminishing spiral at final position

#### Parameters {#minianimate.gen_path.spiral-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `destination` as input and
    returns boolean value indicating whether animation should be done.
    Default: `false` if `destination` is within one line of origin (reduces
    flickering), `true` otherwise.

  - <span class="help-syntax-keys">\<width\></span> `(number)` - initial width of spiral. Default: 2.

#### Return {#minianimate.gen_path.spiral-return}


`(function)` Path function (see [`MiniAnimate.config.cursor`](mini-animate.qmd#minianimate.config.cursor)).

---

### gen_subscroll {#minianimate.gen_subscroll}

<p align="center">`MiniAnimate.gen_subscroll`</p>
Generate scroll animation subscroll

For more information see [`MiniAnimate.config.scroll`](mini-animate.qmd#minianimate.config.scroll).

This is a table with function elements. Call to actually get generator.

Example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    scroll = {
      -- Animate equally but with 120 maximum steps instead of default 60
      subscroll = animate.gen_subscroll.equal({ max_output_steps = 120 }),
    }
  })
  ```

---

### gen_subscroll.equal() {#minianimate.gen_subscroll.equal}

<p align="center">`MiniAnimate.gen_subscroll.equal`(<span class="help-syntax-special">{opts}</span>)</p>
Generate subscroll with equal steps

#### Parameters {#minianimate.gen_subscroll.equal-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `total_scroll` as
    input and returns boolean value indicating whether animation should be
    done. Default: `false` if `total_scroll` is 1 or less (reduces
    unnecessary waiting), `true` otherwise.

  - <span class="help-syntax-keys">\<max_output_steps\></span> `(number)` - maximum number of subscroll steps in output.
    Adjust this to reduce computations in expense of reduced smoothness.
    Default: 60.

#### Return {#minianimate.gen_subscroll.equal-return}


`(function)` Subscroll function (see [`MiniAnimate.config.scroll`](mini-animate.qmd#minianimate.config.scroll)).

---

### gen_subresize {#minianimate.gen_subresize}

<p align="center">`MiniAnimate.gen_subresize`</p>
Generate resize animation subresize

For more information see [`MiniAnimate.config.resize`](mini-animate.qmd#minianimate.config.resize).

This is a table with function elements. Call to actually get generator.

Example:

  ```lua
  local is_many_wins = function(sizes_from, sizes_to)
    return vim.tbl_count(sizes_from) >= 3
  end
  local animate = require('mini.animate')
  animate.setup({
    resize = {
      -- Animate only if there are at least 3 windows
      subresize = animate.gen_subresize.equal({ predicate = is_many_wins }),
    }
  })
  ```

---

### gen_subresize.equal() {#minianimate.gen_subresize.equal}

<p align="center">`MiniAnimate.gen_subresize.equal`(<span class="help-syntax-special">{opts}</span>)</p>
Generate subresize with equal steps

#### Parameters {#minianimate.gen_subresize.equal-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `sizes_from` and
    `sizes_to` as input and returns boolean value indicating whether
    animation should be done. Default: always `true`.

#### Return {#minianimate.gen_subresize.equal-return}


`(function)` Subresize function (see [`MiniAnimate.config.resize`](mini-animate.qmd#minianimate.config.resize)).

---

### gen_winconfig {#minianimate.gen_winconfig}

<p align="center">`MiniAnimate.gen_winconfig`</p>
Generate open/close animation winconfig

For more information see [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open) or [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close).

This is a table with function elements. Call to actually get generator.

Example:

  ```lua
  local is_not_single_window = function(win_id)
    local tabpage_id = vim.api.nvim_win_get_tabpage(win_id)
    return #vim.api.nvim_tabpage_list_wins(tabpage_id) > 1
  end
  local animate = require('mini.animate')
  animate.setup({
    open = {
      -- Animate with wiping from nearest edge instead of default static one
      -- and only if it is not a single window in tabpage
      winconfig = animate.gen_winconfig.wipe({
        predicate = is_not_single_window,
        direction = 'from_edge',
      }),
    },
    close = {
      -- Animate with wiping to nearest edge instead of default static one
      -- and only if it is not a single window in tabpage
      winconfig = animate.gen_winconfig.wipe({
        predicate = is_not_single_window,
        direction = 'to_edge',
      }),
    },
  })
  ```

---

### gen_winconfig.static() {#minianimate.gen_winconfig.static}

<p align="center">`MiniAnimate.gen_winconfig.static`(<span class="help-syntax-special">{opts}</span>)</p>
Generate winconfig for static floating window

This will result into floating window statically covering whole target
window.

#### Parameters {#minianimate.gen_winconfig.static-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `win_id` as input and
    returns boolean value indicating whether animation should be done.
    Default: always `true`.

  - <span class="help-syntax-keys">\<n_steps\></span> `(number)` - number of output steps, all with same config.
    Useful to tweak smoothness of transparency animation (done inside
    `winblend` config option). Default: 25.

#### Return {#minianimate.gen_winconfig.static-return}


`(function)` Winconfig function (see [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open)
  or [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close)).

---

### gen_winconfig.center() {#minianimate.gen_winconfig.center}

<p align="center">`MiniAnimate.gen_winconfig.center`(<span class="help-syntax-special">{opts}</span>)</p>
Generate winconfig for center-focused animated floating window

This will result into floating window growing from or shrinking to the
target window center.

#### Parameters {#minianimate.gen_winconfig.center-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `win_id` as input and
    returns boolean value indicating whether animation should be done.
    Default: always `true`.

  - <span class="help-syntax-keys">\<direction\></span> `(string)` - one of `"to_center"` (default; window will
    shrink from full coverage to center) or `"from_center"` (window will
    grow from center to full coverage).

#### Return {#minianimate.gen_winconfig.center-return}


`(function)` Winconfig function (see [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open)
  or [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close)).

---

### gen_winconfig.wipe() {#minianimate.gen_winconfig.wipe}

<p align="center">`MiniAnimate.gen_winconfig.wipe`(<span class="help-syntax-special">{opts}</span>)</p>
Generate winconfig for wiping animated floating window

This will result into floating window growing from or shrinking to the
nearest edge. This also takes into account the split type of target window:
vertically split window will progress towards vertical edge; horizontally -
towards horizontal.

#### Parameters {#minianimate.gen_winconfig.wipe-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<predicate\></span> `(function)` - a callable which takes `win_id` as input and
    returns boolean value indicating whether animation should be done.
    Default: always `true`.

  - <span class="help-syntax-keys">\<direction\></span> `(string)` - one of `"to_edge"` (default; window will
    shrink from full coverage to nearest edge) or `"from_edge"` (window
    will grow from edge to full coverage).

#### Return {#minianimate.gen_winconfig.wipe-return}


`(function)` Winconfig function (see [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open)
  or [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close)).

---

### gen_winblend {#minianimate.gen_winblend}

<p align="center">`MiniAnimate.gen_winblend`</p>
Generate open/close animation `winblend` progression

For more information see [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open) or [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close).

This is a table with function elements. Call to actually get transparency
function.

Example:

  ```lua
  local animate = require('mini.animate')
  animate.setup({
    open = {
      -- Change transparency from 60 to 80 instead of default 80 to 100
      winblend = animate.gen_winblend.linear({ from = 60, to = 80 }),
    },
    close = {
      -- Change transparency from 60 to 80 instead of default 80 to 100
      winblend = animate.gen_winblend.linear({ from = 60, to = 80 }),
    },
  })
  ```

---

### gen_winblend.linear() {#minianimate.gen_winblend.linear}

<p align="center">`MiniAnimate.gen_winblend.linear`(<span class="help-syntax-special">{opts}</span>)</p>
Generate linear `winblend` progression

#### Parameters {#minianimate.gen_winblend.linear-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control generator. Possible keys:

  - <span class="help-syntax-keys">\<from\></span> `(number)` - initial value of 'winblend'.

  - <span class="help-syntax-keys">\<to\></span> `(number)` - final value of 'winblend'.

#### Return {#minianimate.gen_winblend.linear-return}


`(function)` Winblend function (see [`MiniAnimate.config.open`](mini-animate.qmd#minianimate.config.open)
  or [`MiniAnimate.config.close`](mini-animate.qmd#minianimate.config.close)).

