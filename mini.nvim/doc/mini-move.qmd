---
title: "mini.move documentation"
toc-depth: 5
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.move" href="mini-move.qmd#mini.move"><b>mini.move</b></a> Move any selection in any direction

MIT License Copyright (c) 2023 Evgeni Chasnovski

---

### Module {#minimove}

Features:

- Works in two modes:

    - Visual mode. Select text (charwise with [`v`](https://neovim.io/doc/user/helptag.html?tag=v), linewise with [`V`](https://neovim.io/doc/user/helptag.html?tag=V), and
      blockwise with [`CTRL-V`](https://neovim.io/doc/user/helptag.html?tag=CTRL-V)) and press customizable mapping to move in
      all four directions (left, right, down, up). It keeps Visual mode.

    - Normal mode. Press customizable mapping to move current line in all
      four directions (left, right, down, up).

    - Special handling of linewise movement:

        - Vertical movement gets reindented with [`=`](https://neovim.io/doc/user/helptag.html?tag==).

        - Horizontal movement is improved indent/dedent with [`>`](https://neovim.io/doc/user/helptag.html?tag=>) / [`<`](https://neovim.io/doc/user/helptag.html?tag=<).

        - Cursor moves along with selection.


- Provides both mappings and Lua functions for motions. See
  [`MiniMove.move_selection()`](mini-move.qmd#minimove.move_selection) and [`MiniMove.move_line()`](mini-move.qmd#minimove.move_line).


- Respects [`v:count`](https://neovim.io/doc/user/helptag.html?tag=v:count). Movement mappings can be preceded by a number which
  multiplies command effect.


- All consecutive moves (regardless of direction) can be undone by a single [`u`](https://neovim.io/doc/user/helptag.html?tag=u).


- Respects preferred column for vertical movement. It will vertically move
  selection as how cursor is moving (not strictly vertically if target
  column is not present in target line).

Notes:

- Doesn't allow moving selection outside of current lines (by design).

#### Setup {#minimove-setup}


This module needs a setup with `require('mini.move').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniMove`
which you can use for scripting or manually (with `:lua MiniMove.*`).

See [`MiniMove.config`](mini-move.qmd#minimove.config) for available config settings.

You can override runtime config settings (but not `config.mappings`) locally
to buffer inside `vim.b.minimove_config` which should have same structure
as `MiniMove.config`. See [`mini.nvim-buffer-local-config`](mini-nvim.qmd#mini.nvim-buffer-local-config) for more details.

#### Comparisons {#minimove-comparisons}



- [matze/vim-move](https://github.com/matze/vim-move):

    - Doesn't support vertical movement of charwise and blockwise selections.
      While 'mini.move' does.

    - Doesn't support horizontal movement of current line in favor of
      horizontal movement of current character. While 'mini.move' supports
      horizontal movement of current line and doesn't support such movement
      of current character.

    - Has extra functionality for certain moves (like move by half page).
      While 'mini.move' does not (by design).

- [booperlv/nvim-gomove](https://github.com/booperlv/nvim-gomove):

    - Doesn't support movement in charwise visual selection.
      While 'mini.move' does.

    - Has extra functionality beyond moving text, like duplication.
      While 'mini.move' concentrates only on moving functionality.

#### Disabling {#minimove-disabling}


To disable, set `vim.g.minimove_disable` (globally) or `vim.b.minimove_disable`
(for a buffer) to `true`. Considering high number of different scenarios
and customization intentions, writing exact rules for disabling module's
functionality is left to user. See [`mini.nvim-disabling-recipes`](mini-nvim.qmd#mini.nvim-disabling-recipes) for common
recipes.

---

### setup() {#minimove.setup}

<p align="center">`MiniMove.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minimove.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [`MiniMove.config`](mini-move.qmd#minimove.config).

#### Usage {#minimove.setup-usage}



  ```lua
  require('mini.move').setup() -- use default config
  -- OR
  require('mini.move').setup({}) -- replace {} with your config table
  ```

---

### config {#minimove.config}

<p align="center">`MiniMove.config`</p>
#### Defaults {#minimove.config-defaults}



  ```lua
  MiniMove.config = {
    -- Module mappings. Use `''` (empty string) to disable one.
    mappings = {
      -- Move visual selection in Visual mode. Defaults are Alt (Meta) + hjkl.
      left = '<M-h>',
      right = '<M-l>',
      down = '<M-j>',
      up = '<M-k>',

      -- Move current line in Normal mode
      line_left = '<M-h>',
      line_right = '<M-l>',
      line_down = '<M-j>',
      line_up = '<M-k>',
    },

    -- Options which control moving behavior
    options = {
      -- Automatically reindent selection during linewise vertical move
      reindent_linewise = true,
    },
  }
  ```

#### Mappings {#minimove.config-mappings}


Other possible choices of mappings:

  ```lua
  -- `HJKL` for moving visual selection (overrides H, L, J in Visual mode)
  require('mini.move').setup({
    mappings = {
      left  = 'H',
      right = 'L',
      down  = 'J',
      up    = 'K',
    }
  })

  -- Shift + arrows
  require('mini.move').setup({
    mappings = {
      left  = '<S-left>',
      right = '<S-right>',
      down  = '<S-down>',
      up    = '<S-up>',

      line_left  = '<S-left>',
      line_right = '<S-right>',
      line_down  = '<S-down>',
      line_up    = '<S-up>',
    }
  })
  ```

---

### move_selection() {#minimove.move_selection}

<p align="center">`MiniMove.move_selection`(<span class="help-syntax-special">{direction}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Move visually selected region in any direction within present lines

Main function powering visual selection move in Visual mode.

Notes:

- Vertical movement in linewise mode is followed up by reindent with [`v_=`](https://neovim.io/doc/user/helptag.html?tag=v_=).

- Horizontal movement in linewise mode is same as [`v_<`](https://neovim.io/doc/user/helptag.html?tag=v_<) and [`v_>`](https://neovim.io/doc/user/helptag.html?tag=v_>).

#### Parameters {#minimove.move_selection-parameters}



<span class="help-syntax-special">{direction}</span> `(string)` One of "left", "down", "up", "right".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Same structure as `options` in [`MiniMove.config`](mini-move.qmd#minimove.config)
  (with its values as defaults) plus these allowed extra fields:

  - <span class="help-syntax-keys">\<n_times\></span> (number) - number of times to try to make a move.
    Default: [`v:count1`](https://neovim.io/doc/user/helptag.html?tag=v:count1).

---

### move_line() {#minimove.move_line}

<p align="center">`MiniMove.move_line`(<span class="help-syntax-special">{direction}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Move current line in any direction

Main function powering current line move in Normal mode.

Notes:

- Vertical movement is followed up by reindent with [`v_=`](https://neovim.io/doc/user/helptag.html?tag=v_=).

- Horizontal movement is almost the same as [`<<`](https://neovim.io/doc/user/helptag.html?tag=<<) and [`>>`](https://neovim.io/doc/user/helptag.html?tag=>>) with a different
  handling of [`v:count`](https://neovim.io/doc/user/helptag.html?tag=v:count) (multiplies shift effect instead of modifying that
  number of lines).

#### Parameters {#minimove.move_line-parameters}



<span class="help-syntax-special">{direction}</span> `(string)` One of "left", "down", "up", "right".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Same structure as `options` in [`MiniMove.config`](mini-move.qmd#minimove.config)
  (with its values as defaults) plus these allowed extra fields:

  - <span class="help-syntax-keys">\<n_times\></span> (number) - number of times to try to make a move.
    Default: [`v:count1`](https://neovim.io/doc/user/helptag.html?tag=v:count1).

