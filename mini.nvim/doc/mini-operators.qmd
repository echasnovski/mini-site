---
title: "mini.operators documentation"
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.operators" href="mini-operators.qmd#mini.operators"><b>mini.operators</b></a> Text edit operators

MIT License Copyright (c) 2023 Evgeni Chasnovski

---

### Module {#module .help-syntax-right-anchor}

Features:

- Operators:

    - Evaluate text and replace with output.

    - Exchange text regions.

    - Multiply (duplicate) text.

    - Replace text with register.

    - Sort text.


- Automated configurable mappings to operate on textobject, line, selection.
  Can be disabled in favor of more control with [MiniOperators.make\_mappings()](mini-operators.qmd#minioperators.make_mappings).


- All operators support [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]) and dot-repeat.

See [MiniOperators-overview](mini-operators.qmd#minioperators-overview) and [MiniOperators.config](mini-operators.qmd#minioperators.config) for more details.

#### Setup {#module-setup}


This module needs a setup with `require('mini.operators').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniOperators`
which you can use for scripting or manually (with `:lua MiniOperators.*`).

See [MiniOperators.config](mini-operators.qmd#minioperators.config) for available config settings.

You can override runtime config settings (but not `config.mappings`) locally
to buffer inside `vim.b.minioperators_config` which should have same structure
as `MiniOperators.config`. See [mini.nvim-buffer-local-config](mini-nvim.qmd#mini.nvim-buffer-local-config) for more details.

#### Comparisons {#module-comparisons}



- [gbprod/substitute.nvim](https://github.com/gbprod/substitute.nvim):

    - Has "replace" and "exchange" variants, but not others from this module.

    - Has "replace/substitute" over range functionality, while this module
      does not by design (it is similar to [:s](https://neovim.io/doc/user/helptag.html?tag=:s) functionality while not
      offering significantly lower mental complexity).

    - "Replace" highlights pasted text, while in this module it doesn't.

    - "Exchange" doesn't work across buffers, while in this module it does.


- [svermeulen/vim-subversive](https://github.com/svermeulen/vim-subversive):

    - Main inspiration for "replace" functionality, so they are mostly similar
      for this operator.

    - Has "replace/substitute" over range functionality, while this module
      does not by design.


- [tommcdo/vim-exchange](https://github.com/tommcdo/vim-exchange):

    - Main inspiration for "exchange" functionality, so they are mostly
      similar for this operator.

    - Doesn't work across buffers, while this module does.


- [christoomey/vim-sort-motion](https://github.com/christoomey/vim-sort-motion):

    - Uses [:sort](https://neovim.io/doc/user/helptag.html?tag=:sort) for linewise sorting, while this module uses consistent
      sorting algorithm (by default, see [MiniOperators.default\_sort\_func()](mini-operators.qmd#minioperators.default_sort_func)).

    - Sorting algorithm can't be customized, while this module allows this
      (see `sort.func` in [MiniOperators.config](mini-operators.qmd#minioperators.config)).

    - For charwise region uses only commas as separators, while this module
      can also separate by semicolon or whitespace (by default,
      see [MiniOperators.default\_sort\_func()](mini-operators.qmd#minioperators.default_sort_func)).

#### Highlight groups {#module-highlightgroups}



- `MiniOperatorsExchangeFrom` - first region to exchange.

To change any highlight group, set it directly with [nvim\_set\_hl()](https://neovim.io/doc/user/helptag.html?tag=nvim_set_hl\(\)).

#### Disabling {#module-disabling}


To disable main functionality, set `vim.g.minioperators_disable` (globally) or
`vim.b.minioperators_disable` (for a buffer) to `true`. Considering high number
of different scenarios and customization intentions, writing exact rules
for disabling module's functionality is left to user. See
[mini.nvim-disabling-recipes](mini-nvim.qmd#mini.nvim-disabling-recipes) for common recipes.

---

### Overview {#minioperators-overview .help-syntax-right-anchor}

Operator defines an action that will be performed on a textobject, motion,
or visual selection (similar to [d](https://neovim.io/doc/user/helptag.html?tag=d), [c](https://neovim.io/doc/user/helptag.html?tag=c), etc.). When makes sense, it can also
respect supplied register (like "replace" operator).

This module implements each operator in a separate dedicated function
(like [MiniOperators.replace()](mini-operators.qmd#minioperators.replace) for "replace" operator). Each such function
takes `mode` as argument and acts depending on it:


- If `mode` is `nil` (or not explicitly supplied), it sets ['operatorfunc'](https://neovim.io/doc/user/helptag.html?tag='operatorfunc')
  to this dedicated function and returns `g@` assuming being called from
  expression mapping. See [:map-operator](https://neovim.io/doc/user/helptag.html?tag=:map-operator) and [:map-expression](https://neovim.io/doc/user/helptag.html?tag=:map-expression) for more details.


- If `mode` is "char", "line", or "block", it acts as `operatorfunc` and performs
  action for region between [`[](https://neovim.io/doc/user/helptag.html?tag=`[) and |`]| marks.


- If `mode` is "visual", it performs action for region between [`<](https://neovim.io/doc/user/helptag.html?tag=`<) and |`>| marks.

For more details about specific operator, see help for its function:


- Evaluate: [MiniOperators.evaluate()](mini-operators.qmd#minioperators.evaluate)

- Exchange: [MiniOperators.exchange()](mini-operators.qmd#minioperators.exchange)

- Multiply: [MiniOperators.multiply()](mini-operators.qmd#minioperators.multiply)

- Replace:  [MiniOperators.replace()](mini-operators.qmd#minioperators.replace)

- Sort:     [MiniOperators.sort()](mini-operators.qmd#minioperators.sort)

#### Mappings {#minioperators-overview-mappings}


<a name="minioperators-mappings" href="mini-operators.qmd#minioperators-mappings"><b>MiniOperators-mappings</b></a>

All operators are automatically mapped during [MiniOperators.setup()](mini-operators.qmd#minioperators.setup) execution.
Mappings keys are deduced from `prefix` field of corresponding `config` entry.
All built-in conflicting mappings are removed (like [gra](https://neovim.io/doc/user/helptag.html?tag=gra), [grn](https://neovim.io/doc/user/helptag.html?tag=grn) in Neovim>=0.11).
Both [gx](https://neovim.io/doc/user/helptag.html?tag=gx) and [v\_gx](https://neovim.io/doc/user/helptag.html?tag=v_gx) are remapped to `gX` (if that is not already taken).

For each operator the following mappings are created:


- In Normal mode to operate on textobject. Uses `prefix` directly.

- In Normal mode to operate on line. Appends to `prefix` the last character.
  This aligns with [operator-doubled](https://neovim.io/doc/user/helptag.html?tag=operator-doubled) and established patterns for operators
  with more than two characters, like [guu](https://neovim.io/doc/user/helptag.html?tag=guu), [gUU](https://neovim.io/doc/user/helptag.html?tag=gUU), etc.

- In Visual mode to operate on visual selection. Uses `prefix` directly.

Example of default mappings for "replace":

- `gr` in Normal mode for operating on textobject.
  Example of usage: `griw` replaces "inner word" with default register.

- `grr` in Normal mode for operating on line.
  Example of usage: `grr` replaces current line.

- `gr` in Visual mode for operating on visual selection.
  Example of usage: `viw` selects "inner word" and `gr` replaces it.

There are two suggested ways to customize mappings:


- Change `prefix` in [MiniOperators.setup()](mini-operators.qmd#minioperators.setup) call. For example, doing

    ```lua
    require('mini.operators').setup({ replace = { prefix = 'cr' } })
    ```

  will make mappings for `cr` / `crr` / `cr` instead of `gr` / `grr` / `gr`.


- Disable automated mapping creation by supplying empty string as prefix and
  use [MiniOperators.make\_mappings()](mini-operators.qmd#minioperators.make_mappings) directly. For example:

    ```lua
    -- Disable automated creation of "replace"
    local operators = require('mini.operators')
    operators.setup({ replace = { prefix = '' } })

    -- Make custom mappings
    operators.make_mappings(
      'replace',
      { textobject = 'cr', line = 'crr', selection = 'cr' }
    )
    ```

---

### setup() {#minioperators.setup .help-syntax-right-anchor}

<p align="center">`MiniOperators.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minioperators.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [MiniOperators.config](mini-operators.qmd#minioperators.config).

#### Usage {#minioperators.setup-usage}



  ```lua
  require('mini.operators').setup() -- use default config
  -- OR
  require('mini.operators').setup({}) -- replace {} with your config table
  ```

---

### config {#minioperators.config .help-syntax-right-anchor}

<p align="center">`MiniOperators.config`</p>
#### Defaults {#minioperators.config-defaults}



  ```lua
  MiniOperators.config = {
    -- Each entry configures one operator.
    -- `prefix` defines keys mapped during `setup()`: in Normal mode
    -- to operate on textobject and line, in Visual - on selection.

    -- Evaluate text and replace with output
    evaluate = {
      prefix = 'g=',

      -- Function which does the evaluation
      func = nil,
    },

    -- Exchange text regions
    exchange = {
      -- NOTE: Default `gx` is remapped to `gX`
      prefix = 'gx',

      -- Whether to reindent new text to match previous indent
      reindent_linewise = true,
    },

    -- Multiply (duplicate) text
    multiply = {
      prefix = 'gm',

      -- Function which can modify text before multiplying
      func = nil,
    },

    -- Replace text with register
    replace = {
      -- NOTE: Default `gr*` LSP mappings are removed
      prefix = 'gr',

      -- Whether to reindent new text to match previous indent
      reindent_linewise = true,
    },

    -- Sort text
    sort = {
      prefix = 'gs',

      -- Function which does the sort
      func = nil,
    }
  }
  ```

#### Evaluate {#minioperators.config-evaluate}


`evaluate.prefix` is a string used to automatically infer operator mappings keys
during [MiniOperators.setup()](mini-operators.qmd#minioperators.setup). See [MiniOperators-mappings](mini-operators.qmd#minioperators-mappings).

`evaluate.func` is a function used to actually evaluate text region.
If `nil` (default), [MiniOperators.default\_evaluate\_func()](mini-operators.qmd#minioperators.default_evaluate_func) is used.

This function will take content table representing selected text as input
and should return array of lines as output (each item per line).
Content table has fields `lines`, array of region lines, and `submode`,
one of `v`, `V`, `\22` (escaped `<C-v>`) for charwise, linewise, and blockwise.

To customize evaluation per language, set `evaluate.func` in buffer-local
config (`vim.b.minioperators_config`; see [mini.nvim-buffer-local-config](mini-nvim.qmd#mini.nvim-buffer-local-config)).

#### Exchange {#minioperators.config-exchange}


`exchange.prefix` is a string used to automatically infer operator mappings keys
during [MiniOperators.setup()](mini-operators.qmd#minioperators.setup). See [MiniOperators-mappings](mini-operators.qmd#minioperators-mappings).

Note: default value "gx" overrides [gx](https://neovim.io/doc/user/helptag.html?tag=gx) / [v\_gx](https://neovim.io/doc/user/helptag.html?tag=v_gx). Instead they are remapped
to `gX` (if that is not already taken). To keep using `gx` with built-in
feature (open URL at cursor) choose different `config.prefix`.

`exchange.reindent_linewise` is a boolean indicating whether newly put linewise
text should preserve indent of replaced text. In other words, if `false`,
regions are exchanged preserving their indents; if `true` - without them.

#### Multiply {#minioperators.config-multiply}


`multiply.prefix` is a string used to automatically infer operator mappings keys
during [MiniOperators.setup()](mini-operators.qmd#minioperators.setup). See [MiniOperators-mappings](mini-operators.qmd#minioperators-mappings).

`multiply.func` is a function used to optionally update multiplied text.
If `nil` (default), text used as is.

Takes content table as input (see "Evaluate" section) and should return
array of lines as output.

#### Replace {#minioperators.config-replace}


`replace.prefix` is a string used to automatically infer operator mappings keys
during [MiniOperators.setup()](mini-operators.qmd#minioperators.setup). See [MiniOperators-mappings](mini-operators.qmd#minioperators-mappings).

`replace.reindent_linewise` is a boolean indicating whether newly put linewise
text should preserve indent of replaced text.

#### Sort {#minioperators.config-sort}


`sort.prefix` is a string used to automatically infer operator mappings keys
during [MiniOperators.setup()](mini-operators.qmd#minioperators.setup). See [MiniOperators-mappings](mini-operators.qmd#minioperators-mappings).

`sort.func` is a function used to actually sort text region.
If `nil` (default), [MiniOperators.default\_sort\_func()](mini-operators.qmd#minioperators.default_sort_func) is used.

Takes content table as input (see "Evaluate" section) and should return
array of lines as output.

Example of `sort.func` which asks user for custom delimiter for charwise region:

  ```lua
  local sort_func = function(content)
    local opts = {}
    if content.submode == 'v' then
      -- Ask for delimiter to be treated as is (not as Lua pattern)
      local delimiter = vim.fn.input('Sort delimiter: ')
      -- Treat surrounding whitespace as part of split
      opts.split_patterns = { '%s*' .. vim.pesc(delimiter) .. '%s*' }
    end
    return MiniOperators.default_sort_func(content, opts)
  end

  require('mini.operators').setup({ sort = { func = sort_func } })
  ```

---

### evaluate() {#minioperators.evaluate .help-syntax-right-anchor}

<p align="center">`MiniOperators.evaluate`(<span class="help-syntax-special">{mode}</span>)</p>
Evaluate text and replace with output

It replaces the region with the output of `config.evaluate.func`.
By default it is [MiniOperators.default\_evaluate\_func()](mini-operators.qmd#minioperators.default_evaluate_func) which evaluates
text as Lua code depending on the region submode.

#### Parameters {#minioperators.evaluate-parameters}



<span class="help-syntax-special">{mode}</span> `(string|nil)` One of `nil`, `'char'`, `'line'`, `'block'`, `'visual'`.

---

### exchange() {#minioperators.exchange .help-syntax-right-anchor}

<p align="center">`MiniOperators.exchange`(<span class="help-syntax-special">{mode}</span>)</p>
Exchange text regions

Has two-step logic:

- First call remembers the region as the one to be exchanged and highlights it
  with `MiniOperatorsExchangeFrom` highlight group.

- Second call performs the exchange. Basically, a two substeps action:
  "yank both regions" and replace each one with another.

Notes:

- Use `<C-c>` to stop exchanging after the first step.


- Exchanged regions can have different (char,line,block)-wise submodes.


- Works with most cases of intersecting regions, but not officially supported.

#### Parameters {#minioperators.exchange-parameters}



<span class="help-syntax-special">{mode}</span> `(string|nil)` One of `nil`, `'char'`, `'line'`, `'block'`, `'visual'`.

---

### multiply() {#minioperators.multiply .help-syntax-right-anchor}

<p align="center">`MiniOperators.multiply`(<span class="help-syntax-special">{mode}</span>)</p>
Multiply (duplicate) text

Copies a region (without affecting registers) and puts it directly after.

Notes:

- Supports two types of [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]): `[count1]gm[count2][textobject]` with default
  `config.multiply.prefix` makes `[count1]` copies of region defined by
  `[count2][textobject]`. Example: `2gm3aw` - 2 copies of `3aw`.


- [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]) for "line" mapping (`gmm` by default) is treated as `[count1]` from
  previous note.


- Advantages of using this instead of "yank" + "paste":

   - Doesn't modify any register, while separate steps need some register to
     hold multiplied text.

   - In most cases separate steps would be "yank" + "move cursor" + "paste",
     while "multiply" makes it at once.

#### Parameters {#minioperators.multiply-parameters}



<span class="help-syntax-special">{mode}</span> `(string|nil)` One of `nil`, `'char'`, `'line'`, `'block'`, `'visual'`.

---

### replace() {#minioperators.replace .help-syntax-right-anchor}

<p align="center">`MiniOperators.replace`(<span class="help-syntax-special">{mode}</span>)</p>
Replace text with register

Notes:

- Supports two types of [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]): `[count1]gr[count2][textobject]` with default
  `config.replace.prefix` puts `[count1]` contents of register over region defined
  by `[count2][textobject]`. Example: `2gr3aw` - 2 register contents over `3aw`.


- [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]) for "line" mapping (`grr` by default) is treated as `[count1]` from
  previous note.


- Advantages of using this instead of "visually select" + "paste with [v\_P](https://neovim.io/doc/user/helptag.html?tag=v_P)":

   - As operator it is dot-repeatable which has cumulative gain in case of
     multiple replacing is needed.

   - Can automatically reindent.

#### Parameters {#minioperators.replace-parameters}



<span class="help-syntax-special">{mode}</span> `(string|nil)` One of `nil`, `'char'`, `'line'`, `'block'`, `'visual'`.

---

### sort() {#minioperators.sort .help-syntax-right-anchor}

<p align="center">`MiniOperators.sort`(<span class="help-syntax-special">{mode}</span>)</p>
Sort text

It replaces the region with the output of `config.sort.func`.
By default it is [MiniOperators.default\_sort\_func()](mini-operators.qmd#minioperators.default_sort_func) which sorts the text
depending on submode.

Notes:

- "line" mapping is charwise (as there is not much sense in sorting
  linewise a single line). This also results into no [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]) support.

#### Parameters {#minioperators.sort-parameters}



<span class="help-syntax-special">{mode}</span> `(string|nil)` One of `nil`, `'char'`, `'line'`, `'block'`, `'visual'`.

---

### make_mappings() {#minioperators.make_mappings .help-syntax-right-anchor}

<p align="center">`MiniOperators.make_mappings`(<span class="help-syntax-special">{operator_name}</span>, <span class="help-syntax-special">{lhs_tbl}</span>)</p>
Make operator mappings

#### Parameters {#minioperators.make_mappings-parameters}



<span class="help-syntax-special">{operator_name}</span> `(string)` Name of existing operator from this module.

<span class="help-syntax-special">{lhs_tbl}</span> `(table)` Table with mappings keys. Should have these fields:

  - <span class="help-syntax-keys">\<textobject\></span> `(string)` - Normal mode mapping to operate on textobject.

  - <span class="help-syntax-keys">\<line\></span> `(string)` - Normal mode mapping to operate on line.
    Usually an alias for textobject mapping followed by [\_](https://neovim.io/doc/user/helptag.html?tag=_).
    For "sort" it operates charwise on whole line without left and right
    whitespace (as there is not much sense in sorting linewise a single line).

  - <span class="help-syntax-keys">\<selection\></span> `(string)` - Visual mode mapping to operate on selection.

  Supply empty string to not create particular mapping. Note: creating `line`
  mapping needs `textobject` mapping to be set.

#### Usage {#minioperators.make_mappings-usage}



  ```lua
  require('mini.operators').make_mappings(
    'replace',
    { textobject = 'cr', line = 'crr', selection = 'cr' }
  )
  ```

---

### default_evaluate_func() {#minioperators.default_evaluate_func .help-syntax-right-anchor}

<p align="center">`MiniOperators.default_evaluate_func`(<span class="help-syntax-special">{content}</span>)</p>
Default evaluate function

Evaluate text as Lua code and return object from last line (like if last
line is prepended with `return` if it is not already).

Behavior depends on region submode:


- For charwise and linewise regions, text evaluated as is.


- For blockwise region, lines are evaluated per line using only first lines
  of outputs. This allows separate execution of lines in order to provide
  something different compared to linewise region.

#### Parameters {#minioperators.default_evaluate_func-parameters}



<span class="help-syntax-special">{content}</span> `(table)` Table with the following fields:

  - <span class="help-syntax-keys">\<lines\></span> `(table)` - array with content lines.

  - <span class="help-syntax-keys">\<submode\></span> `(string)` - region submode. One of `'v'`, `'V'`, `'<C-v>'` (escaped).

---

### default_sort_func() {#minioperators.default_sort_func .help-syntax-right-anchor}

<p align="center">`MiniOperators.default_sort_func`(<span class="help-syntax-special">{content}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Default sort function

Sort text based on region submode:


- For charwise region, split by separator pattern, sort parts, merge back
  with separators. Actual pattern is inferred based on the array of patterns
  from `opts.split_patterns`: whichever element is present in the text is
  used, preferring the earlier one if several are present.
  Example: sorting "c, b; a" line with default `opts.split_patterns` results
  into "b; a, c" as it is split only by comma.


- For linewise and blockwise regions sort lines as is.

Notes:

- Sort is done with [table.sort()](https://neovim.io/doc/user/helptag.html?tag=table.sort\(\)) on an array of lines, which doesn't treat
  whitespace or digits specially. Use [:sort](https://neovim.io/doc/user/helptag.html?tag=:sort) for more complicated tasks.


- Pattern is allowed to be an empty string in which case split results into
  all characters as parts.


- Pad pattern in `split_patterns` with `%s*` to include whitespace into separator.
  Example: line "b _ a" with "_" pattern will be sorted as " a_b " (because
  it is split as "b ", "_", " a" ) while with "%s_%s" pattern it results
  into "a _ b" (split as "b", " _ ", "a").

#### Parameters {#minioperators.default_sort_func-parameters}



<span class="help-syntax-special">{content}</span> `(table)` Table with the following fields:

  - <span class="help-syntax-keys">\<lines\></span> `(table)` - array with content lines.

  - <span class="help-syntax-keys">\<submode\></span> `(string)` - region submode. One of `'v'`, `'V'`, `'<C-v>'` (escaped).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<compare_fun\></span> `(function)` - compare function compatible with [table.sort()](https://neovim.io/doc/user/helptag.html?tag=table.sort\(\)).
    Default: direct compare with `<`.

  - <span class="help-syntax-keys">\<split_patterns\></span> `(table)` - array of split Lua patterns to be used for
    charwise submode. Order is important.
    Default: `{ '%s*,%s*', '%s*;%s*', '%s+', '' }`.

