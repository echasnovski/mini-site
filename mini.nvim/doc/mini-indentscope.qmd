---
title: "mini.indentscope documentation"
toc-depth: 5
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.indentscope" href="mini-indentscope.qmd#mini.indentscope"><b>mini.indentscope</b></a> Visualize and work with indent scope

MIT License Copyright (c) 2022 Evgeni Chasnovski

---

### Module {#miniindentscope}

Indent scope (or just "scope") is a maximum set of consecutive lines which
contains certain reference line (cursor line by default) and every member
has indent not less than certain reference indent ("indent at cursor" by
default: minimum between cursor column and indent of cursor line).

Features:

- Visualize scope with animated vertical line. It is very fast and done
  automatically in a non-blocking way (other operations can be performed,
  like moving cursor). You can customize debounce delay and animation rule.


- Customization of scope computation options can be done on global level
  (in [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config)), for a certain buffer (using
  `vim.b.miniindentscope_config` buffer variable), or within a call (using
  `opts` variable in [`MiniIndentscope.get_scope()`](mini-indentscope.qmd#miniindentscope.get_scope)).


- Customizable notion of a border: which adjacent lines with strictly lower
  indent are recognized as such. This is useful for a certain filetypes
  (for example, Python or plain text).


- Customizable way of line to be considered "border first". This is useful
  if you want to place cursor on function header and get scope of its body.


- There are textobjects and motions to operate on scope. Support [`count`](https://neovim.io/doc/user/helptag.html?tag=count)
  and dot-repeat (in operator pending mode).

#### Setup {#miniindentscope-setup}


This module needs a setup with `require('mini.indentscope').setup({})`
(replace `{}` with your `config` table). It will create global Lua table
`MiniIndentscope` which you can use for scripting or manually (with `:lua
MiniIndentscope.*`).

See [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config) for available config settings.

You can override runtime config settings locally to buffer inside
`vim.b.miniindentscope_config` which should have same structure as
`MiniIndentscope.config`. See [`mini.nvim-buffer-local-config`](mini-nvim.qmd#mini.nvim-buffer-local-config) for more
details.

#### Comparisons {#miniindentscope-comparisons}



- [lukas-reineke/indent-blankline.nvim](https://github.com/lukas-reineke/indent-blankline.nvim):

    - Its main functionality is about showing static guides of indent levels.

    - Implementation of 'mini.indentscope' is similar to
      'indent-blankline.nvim' (using [`extmarks`](https://neovim.io/doc/user/helptag.html?tag=extmarks) on first column to be shown
      even on blank lines). They can be used simultaneously, but it will
      lead to one of the visualizations being on top (hiding) of another.

#### Highlight groups {#miniindentscope-highlightgroups}



- `MiniIndentscopeSymbol` - symbol showing on every line of scope if its
  indent is multiple of 'shiftwidth'.

- `MiniIndentscopeSymbolOff` - symbol showing on every line of scope if its
  indent is not multiple of 'shiftwidth'.
  Default: links to `MiniIndentscopeSymbol`.

To change any highlight group, set it directly with [`nvim_set_hl()`](https://neovim.io/doc/user/helptag.html?tag=nvim_set_hl\(\)).

#### Disabling {#miniindentscope-disabling}


To disable autodrawing, set `vim.g.miniindentscope_disable` (globally) or
`vim.b.miniindentscope_disable` (for a buffer) to `true`. Considering high
number of different scenarios and customization intentions, writing exact
rules for disabling module's functionality is left to user. See
[`mini.nvim-disabling-recipes`](mini-nvim.qmd#mini.nvim-disabling-recipes) for common recipes.

---

### Drawing {#miniindentscope-drawing}

Draw of scope indicator is done as iterative animation. It has the
following design:

- Draw indicator on origin line (where cursor is at) immediately. Indicator
  is visualized as `MiniIndentscope.config.symbol` placed to the right of
  scope's border indent. This creates a line from top to bottom scope edges.

- Draw upward and downward concurrently per one line. Progression by one
  line in both direction is considered to be one step of animation.

- Before each step wait certain amount of time, which is decided by
  "animation function". It takes next and total step numbers (both are one
  or bigger) and returns number of milliseconds to wait before drawing next
  step. Comparing to a more popular "easing functions" in animation (input:
  duration since animation start; output: percent of animation done), it is
  a discrete inverse version of its derivative. Such interface proved to be
  more appropriate for kind of task at hand.

#### Special cases {#miniindentscope-drawing-specialcases}



- When scope to be drawn intersects (same indent, ranges overlap) currently
  visible one (at process or finished drawing), drawing is done immediately
  without animation. With most common example being typing new text, this
  feels more natural.

- Scope for the whole buffer is not drawn as it is isually redundant.
  Technically, it can be thought as drawn at column 0 (because border
  indent is -1) which is not visible.

---

### setup() {#miniindentscope.setup}

<p align="center">`MiniIndentscope.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#miniindentscope.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config).

#### Usage {#miniindentscope.setup-usage}



  ```lua
  require('mini.indentscope').setup() -- use default config
  -- OR
  require('mini.indentscope').setup({}) -- replace {} with your config table
  ```

---

### config {#miniindentscope.config}

<p align="center">`MiniIndentscope.config`</p>
#### Defaults {#miniindentscope.config-defaults}



  ```lua
  MiniIndentscope.config = {
    -- Draw options
    draw = {
      -- Delay (in ms) between event and start of drawing scope indicator
      delay = 100,

      -- Animation rule for scope's first drawing. A function which, given
      -- next and total step numbers, returns wait time (in ms). See
      -- |MiniIndentscope.gen_animation| for builtin options. To disable
      -- animation, use `require('mini.indentscope').gen_animation.none()`.
      animation = --<function: implements constant 20ms between steps>,

      -- Whether to auto draw scope: return `true` to draw, `false` otherwise.
      -- Default draws only fully computed scope (see `options.n_lines`).
      predicate = function(scope) return not scope.body.is_incomplete end,

      -- Symbol priority. Increase to display on top of more symbols.
      priority = 2,
    },

    -- Module mappings. Use `''` (empty string) to disable one.
    mappings = {
      -- Textobjects
      object_scope = 'ii',
      object_scope_with_border = 'ai',

      -- Motions (jump to respective border line; if not present - body line)
      goto_top = '[i',
      goto_bottom = ']i',
    },

    -- Options which control scope computation
    options = {
      -- Type of scope's border: which line(s) with smaller indent to
      -- categorize as border. Can be one of: 'both', 'top', 'bottom', 'none'.
      border = 'both',

      -- Whether to use cursor column when computing reference indent.
      -- Useful to see incremental scopes with horizontal cursor movements.
      indent_at_cursor = true,

      -- Maximum number of lines above or below within which scope is computed
      n_lines = 10000,

      -- Whether to first check input line to be a border of adjacent scope.
      -- Use it if you want to place cursor on function header to get scope of
      -- its body.
      try_as_border = false,
    },

    -- Which character to use for drawing scope indicator
    symbol = 'â•Ž',
  }
  ```

#### Options {#miniindentscope.config-options}


##### Border {#miniindentscope.config-options-border}


Field `border` controls which line(s) with smaller indent to categorize
as border. This matters for textobjects and motions.
It also controls how empty lines are treated: they are included in scope
only if followed by a border. Another way of looking at it is that indent
of blank line is computed based on value of `border` option.
Here is an illustration of how `border` works in presence of empty lines:

  ```
                             |both|bottom|top|none|
  1|function foo()           | 0  |  0   | 0 | 0  |
  2|                         | 4  |  0   | 4 | 0  |
  3|    print('Hello world') | 4  |  4   | 4 | 4  |
  4|                         | 4  |  4   | 2 | 2  |
  5|  end                    | 2  |  2   | 2 | 2  |
  ```

Numbers inside a table are indent values of a line computed with certain
value of `border`. So, for example, a scope with reference line 3 and
right-most column has body range depending on value of `border` option:

- `border` is "both":   range is 2-4, border is 1 and 5 with indent 2.

- `border` is "top":    range is 2-3, border is 1 with indent 0.

- `border` is "bottom": range is 3-4, border is 5 with indent 0.

- `border` is "none":   range is 3-3, border is empty with indent `nil`.

##### Indent at cursor {#miniindentscope.config-options-indentatcursor}


Field `indent_at_cursor` controls if cursor position should affect computation
of scope. If `true`, reference indent is a minimum of reference line's indent
and cursor column. In main example, here how scope's body range differs
depending on cursor column and `indent_at_cursor` value (assuming cursor is
on line 3 and it is whole buffer):

  ```
  Column\Option true|false
     1 and 2    2-5 | 2-4
   3 and more   2-4 | 2-4
  ```

##### Number of lines {#miniindentscope.config-options-numberoflines}


Field `n_lines` defines [`MiniIndentscope.get_scope()`](mini-indentscope.qmd#miniindentscope.get_scope) behavior for how many
lines above/below to check before iteration is stopped. Scope that reached
computation limit has <span class="help-syntax-keys">\<is_incomplete\></span> field set to `true`. It will also not
be auto drawn with default `config.draw.predicate`.

Lower values will result in better overall performance in exchange for more
frequent incomplete scope computation. Set to `math.huge` for no restriction.

##### Try as border {#miniindentscope.config-options-tryasborder}


Field `try_as_border` controls how to act when input line can be recognized
as a border of some neighbor indent scope. In main example, when input line
is 1 and can be recognized as border for inner scope, value `try_as_border=true`
means that inner scope will be returned. Similar, for input line 5 inner scope
will be returned if it is recognized as border.

---

### get_scope() {#miniindentscope.get_scope}

<p align="center">`MiniIndentscope.get_scope`(<span class="help-syntax-special">{line}</span>, <span class="help-syntax-special">{col}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Compute indent scope

Indent scope (or just "scope") is a maximum set of consecutive lines which
contains certain reference line (cursor line by default) and every member
has indent not less than certain reference indent ("indent at column" by
default). Here "indent at column" means minimum between input column value
and indent of reference line. When using cursor column, this allows for a
useful interactive view of nested indent scopes by making horizontal
movements within line.

Options controlling actual computation is taken from these places in order:

- Argument `opts`. Use it to ensure independence from other sources.

- Buffer local variable `vim.b.miniindentscope_config` (`options` field).
  Useful to define local behavior (for example, for a certain filetype).

- Global options from [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config).

#### Algorithm overview {#miniindentscope.get_scope-algorithmoverview}



- Compute reference "indent at column". Reference line is an input `line`
  which might be modified to one of its neighbors if `try_as_border` option
  is `true`: if it can be viewed as border of some neighbor scope, it will.

- Process upwards and downwards from reference line searching for line with
  indent strictly less than reference one. This is like casting rays up and
  down from reference line and reference indent until meeting "a wall"
  (character to the right of indent or buffer edge). Latest line before
  meeting a wall is a respective end of scope body. It always exists because
  reference line is a such one.
  Casting ray is forced to stop if it goes over `opts.n_lines` lines.

- Based on top and bottom lines with strictly lower indent, construct
  scopes's border. The way it is computed is decided based on `border`
  option (see [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config) for more information).

- Compute border indent as maximum indent of border lines (or reference
  indent minus one in case of no border). This is used during drawing
  visual indicator.

#### Indent computation {#miniindentscope.get_scope-indentcomputation}


For every line indent is intended to be computed unambiguously:

- For "normal" lines indent is an output of [`indent()`](https://neovim.io/doc/user/helptag.html?tag=indent\(\)).

- Indent is `-1` for imaginary lines 0 and past last line.

- For blank and empty lines indent is computed based on previous
  ([`prevnonblank()`](https://neovim.io/doc/user/helptag.html?tag=prevnonblank\(\))) and next ([`nextnonblank()`](https://neovim.io/doc/user/helptag.html?tag=nextnonblank\(\))) non-blank lines. The way
  it is computed is decided based on `border` in order to not include blank
  lines at edge of scope's body if there is no border there. See
  [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config) for a details example.

#### Parameters {#miniindentscope.get_scope-parameters}



<span class="help-syntax-special">{line}</span> `(number|nil)` Input line number (starts from 1). Can be modified to a
  neighbor if `try_as_border` is `true`. Default: cursor line.

<span class="help-syntax-special">{col}</span> `(number|nil)` Column number (starts from 1). Default: if
  `indent_at_cursor` option is `true` - cursor column from `curswant` of
  [`getcurpos()`](https://neovim.io/doc/user/helptag.html?tag=getcurpos\(\)) (allows for more natural behavior on empty lines);
  `math.huge` otherwise in order to not incorporate cursor in computation.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options to override global or buffer local ones (see
  [`MiniIndentscope.config`](mini-indentscope.qmd#miniindentscope.config)).

#### Return {#miniindentscope.get_scope-return}


`(table)` Table with scope information:

  - <span class="help-syntax-keys">\<body\></span> - table with <span class="help-syntax-keys">\<top\></span> (top line of scope, inclusive), <span class="help-syntax-keys">\<bottom\></span>
    (bottom line of scope, inclusive), and <span class="help-syntax-keys">\<indent\></span> (minimum indent within
    scope) keys. Line numbers start at 1. Can also have <span class="help-syntax-keys">\<is_incomplete\></span> key
    set to `true` if computation was stopped due to `opts.n_lines` restriction.

  - <span class="help-syntax-keys">\<border\></span> - table with <span class="help-syntax-keys">\<top\></span> (line of top border, might be `nil`),
    <span class="help-syntax-keys">\<bottom\></span> (line of bottom border, might be `nil`), and <span class="help-syntax-keys">\<indent\></span> (indent
    of border) keys. Line numbers start at 1.

  - <span class="help-syntax-keys">\<buf_id\></span> - identifier of current buffer.

  - <span class="help-syntax-keys">\<reference\></span> - table with <span class="help-syntax-keys">\<line\></span> (reference line), <span class="help-syntax-keys">\<column\></span> (reference
    column), and <span class="help-syntax-keys">\<indent\></span> ("indent at column") keys.

---

### draw() {#miniindentscope.draw}

<p align="center">`MiniIndentscope.draw`(<span class="help-syntax-special">{scope}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Draw scope manually

Scope is visualized as a vertical line within scope's body range at column
equal to border indent plus one (or body indent if border is absent).
Numbering starts from one.

#### Parameters {#miniindentscope.draw-parameters}



<span class="help-syntax-special">{scope}</span> `(table|nil)` Scope. Default: output of [`MiniIndentscope.get_scope()`](mini-indentscope.qmd#miniindentscope.get_scope)
  with default arguments.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Currently supported:

   - <span class="help-syntax-keys">\<animation_fun\></span> - animation function for drawing. See
     [`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing) and [`MiniIndentscope.gen_animation`](mini-indentscope.qmd#miniindentscope.gen_animation).

   - <span class="help-syntax-keys">\<priority\></span> - priority number for visualization. See `priority` option
     for [`nvim_buf_set_extmark()`](https://neovim.io/doc/user/helptag.html?tag=nvim_buf_set_extmark\(\)).

---

### undraw() {#miniindentscope.undraw}

<p align="center">`MiniIndentscope.undraw`()</p>
Undraw currently visible scope manually

---

### gen_animation {#miniindentscope.gen_animation}

<p align="center">`MiniIndentscope.gen_animation`</p>
Generate builtin animation function

This is a builtin source to generate animation function for usage in
`MiniIndentscope.config.draw.animation`. Most of them are variations of
common easing functions, which provide certain type of progression for
revealing scope visual indicator.

Each field corresponds to one family of progression which can be customized
further by supplying appropriate arguments.

Examples:

- Don't use animation: `MiniIndentscope.gen_animation.none()`

- Use quadratic "out" easing with total duration of 1000 ms:

  ```lua
  gen_animation.quadratic({ easing = 'out', duration = 1000, unit = 'total' })
  ```

#### See also {#miniindentscope.gen_animation-seealso}


[`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing) for more information about how drawing is done.

---

### gen_animation.none() {#miniindentscope.gen_animation.none}

<p align="center">`MiniIndentscope.gen_animation.none`()</p>
Generate no animation

Show indicator immediately. Same as animation function always returning 0.

---

### gen_animation.linear() {#miniindentscope.gen_animation.linear}

<p align="center">`MiniIndentscope.gen_animation.linear`(<span class="help-syntax-special">{opts}</span>)</p>
Generate linear progression

#### Parameters {#miniindentscope.gen_animation.linear-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#miniindentscope.gen_animation.linear-return}


`(function)` Animation function (see [`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing)).

---

### gen_animation.quadratic() {#miniindentscope.gen_animation.quadratic}

<p align="center">`MiniIndentscope.gen_animation.quadratic`(<span class="help-syntax-special">{opts}</span>)</p>
Generate quadratic progression

#### Parameters {#miniindentscope.gen_animation.quadratic-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#miniindentscope.gen_animation.quadratic-return}


`(function)` Animation function (see [`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing)).

---

### gen_animation.cubic() {#miniindentscope.gen_animation.cubic}

<p align="center">`MiniIndentscope.gen_animation.cubic`(<span class="help-syntax-special">{opts}</span>)</p>
Generate cubic progression

#### Parameters {#miniindentscope.gen_animation.cubic-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#miniindentscope.gen_animation.cubic-return}


`(function)` Animation function (see [`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing)).

---

### gen_animation.quartic() {#miniindentscope.gen_animation.quartic}

<p align="center">`MiniIndentscope.gen_animation.quartic`(<span class="help-syntax-special">{opts}</span>)</p>
Generate quartic progression

#### Parameters {#miniindentscope.gen_animation.quartic-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#miniindentscope.gen_animation.quartic-return}


`(function)` Animation function (see [`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing)).

---

### gen_animation.exponential() {#miniindentscope.gen_animation.exponential}

<p align="center">`MiniIndentscope.gen_animation.exponential`(<span class="help-syntax-special">{opts}</span>)</p>
Generate exponential progression

#### Parameters {#miniindentscope.gen_animation.exponential-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options that control progression. Possible keys:

  - <span class="help-syntax-keys">\<easing\></span> `(string)` - a subtype of progression. One of "in"
    (accelerating from zero speed), "out" (decelerating to zero speed),
    "in-out" (default; accelerating halfway, decelerating after).

  - <span class="help-syntax-keys">\<duration\></span> `(number)` - duration (in ms) of a unit. Default: 20.

  - <span class="help-syntax-keys">\<unit\></span> `(string)` - which unit's duration `opts.duration` controls. One
    of "step" (default; ensures average duration of step to be `opts.duration`)
    or "total" (ensures fixed total duration regardless of scope's range).

#### Return {#miniindentscope.gen_animation.exponential-return}


`(function)` Animation function (see [`MiniIndentscope-drawing`](mini-indentscope.qmd#miniindentscope-drawing)).

---

### move_cursor() {#miniindentscope.move_cursor}

<p align="center">`MiniIndentscope.move_cursor`(<span class="help-syntax-special">{side}</span>, <span class="help-syntax-special">{use_border}</span>, <span class="help-syntax-special">{scope}</span>)</p>
Move cursor within scope

Cursor is placed on a first non-blank character of target line.

#### Parameters {#miniindentscope.move_cursor-parameters}



<span class="help-syntax-special">{side}</span> `(string)` One of "top" or "bottom".

<span class="help-syntax-special">{use_border}</span> `(boolean|nil)` Whether to move to border or within scope's body.
  If particular border is absent, body is used.

<span class="help-syntax-special">{scope}</span> `(table|nil)` Scope to use. Default: output of [`MiniIndentscope.get_scope()`](mini-indentscope.qmd#miniindentscope.get_scope).

---

### operator() {#miniindentscope.operator}

<p align="center">`MiniIndentscope.operator`(<span class="help-syntax-special">{side}</span>, <span class="help-syntax-special">{add_to_jumplist}</span>)</p>
Function for motion mappings

Move to a certain side of border. Respects [`count`](https://neovim.io/doc/user/helptag.html?tag=count) and dot-repeat (in
operator-pending mode). Doesn't move cursor for scope that is not shown
(drawing indent less that zero).

#### Parameters {#miniindentscope.operator-parameters}



<span class="help-syntax-special">{side}</span> `(string)` One of "top" or "bottom".

<span class="help-syntax-special">{add_to_jumplist}</span> `(boolean|nil)` Whether to add movement to jump list. It is
  `true` only for Normal mode mappings.

---

### textobject() {#miniindentscope.textobject}

<p align="center">`MiniIndentscope.textobject`(<span class="help-syntax-special">{use_border}</span>)</p>
Function for textobject mappings

Respects [`count`](https://neovim.io/doc/user/helptag.html?tag=count) and dot-repeat (in operator-pending mode). Doesn't work
for scope that is not shown (drawing indent less that zero).

#### Parameters {#miniindentscope.textobject-parameters}



<span class="help-syntax-special">{use_border}</span> `(boolean|nil)` Whether to include border in textobject. When
  `true` and `try_as_border` option is `false`, allows "chaining" calls for
  incremental selection.

