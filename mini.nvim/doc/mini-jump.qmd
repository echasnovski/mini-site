---
title: "mini.jump documentation"
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.jump" href="mini-jump.qmd#mini.jump"><b>mini.jump</b></a> Jump to next/previous single character

MIT License Copyright (c) 2021 Evgeni Chasnovski, Adam Bla≈æek

---

### Module {#module .help-syntax-right-anchor}

Features:

- Extend f, F, t, T to work on multiple lines.


- Repeat jump by pressing f, F, t, T again. It is reset when cursor moved
  as a result of not jumping or timeout after idle time (duration
  customizable).


- Highlight (after customizable delay) all possible target characters and
  stop it after some (customizable) idle time.


- Normal, Visual, and Operator-pending (with full dot-repeat) modes are
  supported.

This module follows vim's 'ignorecase' and 'smartcase' options. When
'ignorecase' is set, f, F, t, T will match case-insensitively. When
'smartcase' is also set, f, F, t, T will only match lowercase
characters case-insensitively.

#### Setup {#module-setup}


This module needs a setup with `require('mini.jump').setup({})`
(replace `{}` with your `config` table). It will create global Lua table
`MiniJump` which you can use for scripting or manually (with
`:lua MiniJump.*`).

See [MiniJump.config](mini-jump.qmd#minijump.config) for `config` structure and default values.

You can override runtime config settings locally to buffer inside
`vim.b.minijump_config` which should have same structure as
`MiniJump.config`. See [mini.nvim-buffer-local-config](mini-nvim.qmd#mini.nvim-buffer-local-config) for more details.

To stop module from showing non-error feedback, set `config.silent = true`.

#### Highlight groups {#module-highlightgroups}



- `MiniJump` - all possible cursor positions.

To change any highlight group, set it directly with [nvim\_set\_hl()](https://neovim.io/doc/user/helptag.html?tag=nvim_set_hl\(\)).

#### Disabling {#module-disabling}


To disable core functionality, set `vim.g.minijump_disable` (globally) or
`vim.b.minijump_disable` (for a buffer) to `true`. Considering high number of
different scenarios and customization intentions, writing exact rules for
disabling module's functionality is left to user. See
[mini.nvim-disabling-recipes](mini-nvim.qmd#mini.nvim-disabling-recipes) for common recipes.

---

### Events {#minijump-events .help-syntax-right-anchor}

To allow user customization and integration of external tools, certain [User](https://neovim.io/doc/user/helptag.html?tag=User)
autocommand events are triggered under common circumstances:


- `MiniJumpGetTarget` - before asking user for the target. Use [MiniJump.state](mini-jump.qmd#minijump.state)
  for more information about the upcoming jump.

- `MiniJumpStart` - after jumping has started.

- `MiniJumpJump` - after performing a jump.

- `MiniJumpStop` - after jumping is stopped.

---

### setup() {#minijump.setup .help-syntax-right-anchor}

<p align="center">`MiniJump.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minijump.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [MiniJump.config](mini-jump.qmd#minijump.config).

#### Usage {#minijump.setup-usage}



  ```lua
  require('mini.jump').setup() -- use default config
  -- OR
  require('mini.jump').setup({}) -- replace {} with your config table
  ```

---

### config {#minijump.config .help-syntax-right-anchor}

<p align="center">`MiniJump.config`</p>
#### Defaults {#minijump.config-defaults}



  ```lua
  MiniJump.config = {
    -- Module mappings. Use `''` (empty string) to disable one.
    mappings = {
      forward = 'f',
      backward = 'F',
      forward_till = 't',
      backward_till = 'T',
      repeat_jump = ';',
    },

    -- Delay values (in ms) for different functionalities. Set any of them to
    -- a very big number (like 10^7) to virtually disable.
    delay = {
      -- Delay between jump and highlighting all possible jumps
      highlight = 250,

      -- Delay between jump and automatic stop if idle (no jump is done)
      idle_stop = 10000000,
    },

    -- Whether to disable showing non-error feedback
    -- This also affects (purely informational) helper messages shown after
    -- idle time if user input is required.
    silent = false,
  }
  ```

---

### state {#minijump.state .help-syntax-right-anchor}

<p align="center">`MiniJump.state`</p>
Data about jumping state

It stores various information used in this module. All elements, except
`jumping`, is about the latest jump. They are used as default values for
similar arguments.

#### Usage {#minijump.state-usage}


This can be used to define mappings which depend on state; either as
a standalone mapping or part of [MiniKeymap.map\_multistep()](mini-keymap.qmd#minikeymap.map_multistep). For example:

  ```lua
  -- Stop jumping after pressing `<Esc>`
  local jump_stop = function()
    if not MiniJump.state.jumping then return '<Esc>' end
    MiniJump.stop_jumping()
  end
  local opts = { expr = true, desc = 'Stop jumping' }
  vim.keymap.set({ 'n', 'x', 'o' }, '<Esc>', jump_stop, opts)
  ```

#### Class {#minijump.state-class}



<span class="help-syntax-special">{JumpingState}</span>

#### Fields {#minijump.state-fields}



<span class="help-syntax-special">{target}</span> `(string|nil)` The string to jump to.

<span class="help-syntax-special">{backward}</span> `(boolean|nil)` Whether to jump backward.

<span class="help-syntax-special">{till}</span> `(boolean|nil)` Whether to jump just before/after the match instead of
  exactly on target. This includes positioning cursor past the end of
  previous/current line. Note that with backward jump this might lead to
  cursor being on target if can't be put past the line.

<span class="help-syntax-special">{n_times}</span> `(number|nil)` Number of times to perform consecutive jumps.

<span class="help-syntax-special">{mode}</span> `(string)` Mode of latest jump (output of [mode()](https://neovim.io/doc/user/helptag.html?tag=mode\(\)) with non-zero argument).

<span class="help-syntax-special">{jumping}</span> `(boolean)` Whether module is currently in "jumping mode": usage of
  [MiniJump.smart\_jump()](mini-jump.qmd#minijump.smart_jump) and all mappings won't require target.

Initial values:


  ```lua
  MiniJump.state = {
    target = nil,
    backward = false,
    till = false,
    n_times = 1,
    mode = nil,
    jumping = false,
  }
  ```

---

### jump() {#minijump.jump .help-syntax-right-anchor}

<p align="center">`MiniJump.jump`(<span class="help-syntax-special">{target}</span>, <span class="help-syntax-special">{backward}</span>, <span class="help-syntax-special">{till}</span>, <span class="help-syntax-special">{n_times}</span>)</p>
Jump to target

Takes a string and jumps to its first occurrence in desired direction.

All default values are taken from [MiniJump.state](mini-jump.qmd#minijump.state) to emulate latest jump.

#### Parameters {#minijump.jump-parameters}



<span class="help-syntax-special">{target}</span> `(string|nil)` The string to jump to.

<span class="help-syntax-special">{backward}</span> `(boolean|nil)` Whether to jump backward.

<span class="help-syntax-special">{till}</span> `(boolean|nil)` Whether to jump just before/after the match instead of
  exactly on target. This includes positioning cursor past the end of
  previous/current line. Note that with backward jump this might lead to
  cursor being on target if can't be put past the line.

<span class="help-syntax-special">{n_times}</span> `(number|nil)` Number of times to perform consecutive jumps.

---

### smart_jump() {#minijump.smart_jump .help-syntax-right-anchor}

<p align="center">`MiniJump.smart_jump`(<span class="help-syntax-special">{backward}</span>, <span class="help-syntax-special">{till}</span>)</p>
Make smart jump

If the last movement was a jump, perform another jump with the same target.
Otherwise, wait for a target input (via [getcharstr()](https://neovim.io/doc/user/helptag.html?tag=getcharstr\(\))). Respects [v:count](https://neovim.io/doc/user/helptag.html?tag=v:count).

All default values are taken from [MiniJump.state](mini-jump.qmd#minijump.state) to emulate latest jump.

#### Parameters {#minijump.smart_jump-parameters}



<span class="help-syntax-special">{backward}</span> `(boolean|nil)` Whether to jump backward.

<span class="help-syntax-special">{till}</span> `(boolean|nil)` Whether to jump just before/after the match instead of
  exactly on target. This includes positioning cursor past the end of
  previous/current line. Note that with backward jump this might lead to
  cursor being on target if can't be put past the line.

---

### stop_jumping() {#minijump.stop_jumping .help-syntax-right-anchor}

<p align="center">`MiniJump.stop_jumping`()</p>
Stop jumping

Removes highlights (if any) and forces the next smart jump to prompt for
the target. Automatically called on appropriate Neovim [events](https://neovim.io/doc/user/helptag.html?tag=events).

