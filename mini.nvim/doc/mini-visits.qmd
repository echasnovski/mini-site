---
title: "mini.visits documentation"
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.visits" href="mini-visits.qmd#mini.visits"><b>mini.visits</b></a> Track and reuse file system visits

MIT License Copyright (c) 2023 Evgeni Chasnovski

---

### Module {#module .help-syntax-right-anchor}

Features:


- Persistently track file system visits (both files and directories)
  per project directory. Store visit index is human readable and editable.


- Visit index is normalized on every write to contain relevant information.
  Exact details can be customized. See [MiniVisits.normalize\_index()](mini-visits.qmd#minivisits.normalize_index).


- Built-in ability to persistently add labels to path for later use.
  See [MiniVisits.add\_label()](mini-visits.qmd#minivisits.add_label) and [MiniVisits.remove\_label()](mini-visits.qmd#minivisits.remove_label).


- Exported functions to reuse visit data:

    - List visited paths/labels with custom filter and sort (uses "robust
      frecency" by default). Can be used as source for pickers.
      See [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths) and [MiniVisits.list\_labels()](mini-visits.qmd#minivisits.list_labels).
      See [MiniVisits.gen\_filter](mini-visits.qmd#minivisits.gen_filter) and [MiniVisits.gen\_sort](mini-visits.qmd#minivisits.gen_sort).


    - Select visited paths/labels using [vim.ui.select()](https://neovim.io/doc/user/helptag.html?tag=vim.ui.select\(\)).
      See [MiniVisits.select\_path()](mini-visits.qmd#minivisits.select_path) and [MiniVisits.select\_label()](mini-visits.qmd#minivisits.select_label).


    - Iterate through visit paths in target direction ("forward", "backward",
      "first", "last"). See [MiniVisits.iterate\_paths()](mini-visits.qmd#minivisits.iterate_paths).


- Exported functions to manually update visit index allowing persistent
  track of any user information. See `*_index()` functions.

Notes:

- All data is stored _only_ in in-session Lua variable (for quick operation)
  and at `config.store.path` on disk (for persistent usage).

- Most of functions affect an in-session data which gets written to disk only
  before Neovim is closing or when users asks to.

- It doesn't account for paths being renamed or moved (because there is no
  general way to detect that). Usually a manual intervention to the visit
  index is required after the change but _before_ the next writing to disk
  (usually before closing current session) because it will treat previous
  path as deleted and remove it from index.
  There is a [MiniVisits.rename\_in\_index()](mini-visits.qmd#minivisits.rename_in_index) helper for that.
  If rename/move is done with [mini.files](mini-files.qmd#mini.files), index is autoupdated.

Sources with more details:

- [MiniVisits-overview](mini-visits.qmd#minivisits-overview)

- [MiniVisits-index-specification](mini-visits.qmd#minivisits-index-specification)

- [MiniVisits-examples](mini-visits.qmd#minivisits-examples)

#### Setup {#module-setup}


This module needs a setup with `require('mini.visits').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniVisits`
which you can use for scripting or manually (with `:lua MiniVisits.*`).

See [MiniVisits.config](mini-visits.qmd#minivisits.config) for `config` structure and default values.

You can override runtime config settings locally to buffer inside
`vim.b.minivisits_config` which should have same structure as
`MiniVisits.config`. See [mini.nvim-buffer-local-config](mini-nvim.qmd#mini.nvim-buffer-local-config) for more details.

#### Comparisons {#module-comparisons}



- [nvim-telescope/telescope-frecency.nvim](https://github.com/nvim-telescope/telescope-frecency.nvim):

    - It stores array of actual visit timestamps, while this module tracks
      only total number and latest timestamp of visits. This is by design
      as a different trade-off between how much data is being used/stored
      and complexity of underlying "frecency" sorting.

    - By default tracks a buffer only once per session, while this module
      tracks on every meaningful buffer enter. This leads to a more relevant
      in-session sorting.

    - Implements an original frecency algorithm of Firefox's address bar,
      while this module uses own "robust frecency" approach.

    - Mostly designed to work with 'nvim-telescope/telescope.nvim', while
      this module provides general function to list paths and select
      with [vim.ui.select()](https://neovim.io/doc/user/helptag.html?tag=vim.ui.select\(\)).

    - Does not allow use of custom data (like labels), while this module does.


- [ThePrimeagen/harpoon](https://github.com/ThePrimeagen/harpoon):

    - Has slightly different concept than general labeling, which more
      resembles adding paths to an ordered stack. This module implements
      a more common labeling which does not imply order with ability to
      make it automated depending on the task and/or preference.

    - Implements marks as positions in a path, while this module labels paths.

    - Writes data on disk after every meaning change, while this module is
      more conservative and read only when Neovim closes or when asked to.

    - Has support for labeling terminals, while this modules is oriented
      only towards paths.

    - Has dedicated UI to manage marks, while this module does not by design.
      There are functions for adding and removing label from the path.

    - Does not provide functionality to track and reuse any visited path,
      while this module does.

#### Disabling {#module-disabling}


To disable automated tracking, set `vim.g.minivisits_disable` (globally) or
`vim.b.minivisits_disable` (for a buffer) to `true`. Considering high
number of different scenarios and customization intentions, writing exact
rules for disabling module's functionality is left to user. See
[mini.nvim-disabling-recipes](mini-nvim.qmd#mini.nvim-disabling-recipes) for common recipes.

---

### Overview {#minivisits-overview .help-syntax-right-anchor}

#### Tracking visits {#minivisits-overview-trackingvisits}


File system visits (both directory and files) tracking is done in two steps:

- On every dedicated event (`config.track.event`, [BufEnter](https://neovim.io/doc/user/helptag.html?tag=BufEnter) by default) timer
  is (re)started to actually register visit after certain amount of time
  (`config.track.delay` milliseconds, 1000 by default). It is not registered
  immediately to allow navigation to target buffer in several steps
  (for example, with series of [:bnext](https://neovim.io/doc/user/helptag.html?tag=:bnext) / [:bprevious](https://neovim.io/doc/user/helptag.html?tag=:bprevious)).


- When delay time passes without any dedicated events being triggered
  (meaning user is "settled" on certain buffer), [MiniVisits.register\_visit()](mini-visits.qmd#minivisits.register_visit)
  is called if all of the following conditions are met:

    - Module is not disabled (see "Disabling" section in [mini.visits](mini-visits.qmd#mini.visits)).

    - Buffer is normal with non-empty name (used as visit path).

    - Visit path does not equal to the latest tracked one. This is to allow
      temporary enter of non-normal buffers (like help, terminal, etc.)
      without artificial increase of visit count.

Visit is autoregistered for [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory) and leads to increase of count
and latest time of visit. See [MiniVisits-index-specification](mini-visits.qmd#minivisits-index-specification) for more details.

Notes:

- All data is stored _only_ in in-session Lua variable (for quick operation)
  and at `config.store.path` on disk (for persistent usage). It is automatically
  written to disk before every Neovim exit (if `config.store.autowrite` is set).


- Tracking can be disabled by supplying empty string as `track.event`.
  Then it is up to the user to properly call [MiniVisits.register\_visit()](mini-visits.qmd#minivisits.register_visit).

#### Reusing visits {#minivisits-overview-reusingvisits}


Visit data can be reused in at least these ways:


- Get a list of visited paths (see [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths)) and use it
  to visualize/pick/navigate visit history.


- Select one of the visited paths to open it (see [MiniVisits.select\_path()](mini-visits.qmd#minivisits.select_path)).


- Move along visit history (see [MiniVisits.iterate\_paths()](mini-visits.qmd#minivisits.iterate_paths)).


- Utilize labels. Any visit can be added one or more labels (like "core",
  "tmp", etc.). They are bound to the visit (path registered for certain
  directory) and are stored persistently.
  Labels can be used to manually create groups of files and/or directories
  that have particular interest to the user.
  There is no one right way to use them, though. See [MiniVisits-examples](mini-visits.qmd#minivisits-examples)
  for some inspiration.


- Utilizing custom data. Visit index can be manipulated manually using
  `_index()` set of functions. All "storable" (i.e. not functions or
  metatables) user data inside index is then stored on disk, so it can be
  used to create any kind of workflow user wants.

See [MiniVisits-examples](mini-visits.qmd#minivisits-examples) for some actual configuration and workflow examples.

---

### Index specification {#minivisits-index-specification .help-syntax-right-anchor}

#### Structure {#minivisits-index-specification-structure}


Visit index is a table containing actual data in two level deep nested tables.

First level keys are paths of project directory (a.k.a "cwd") for which
visits are registered.

Second level keys are actual visit paths. Their values are tables with visit
data which should follow these requirements:

- Field <span class="help-syntax-keys">\<count\></span> should be present and be a number. It represents the number
  of times this path was visited under particular cwd.

- Field <span class="help-syntax-keys">\<latest\></span> should be present and be a number. It represents the time
  of latest path visit under particular cwd.
  By default computed with [os.time()](https://neovim.io/doc/user/helptag.html?tag=os.time\(\)) (up to a second).

- Field <span class="help-syntax-keys">\<labels\></span> might not be present. If present, it should be a table
  with string labels as keys and `true` as values. It represents labels of
  the path under particular cwd.

Notes:

- All paths are absolute.

- Visit path should not necessarily be a part of corresponding cwd.

- Both `count` and `latest` can be any number: whole, fractional, negative, etc.

Example of an index data:

  ```lua
  {
    ['/home/user/project_1'] = {
      ['home/user/project_1/file'] = { count = 3, latest = 1699796000 },
      ['home/user/project_1/subdir'] = {
        count = 10, latest = 1699797000, labels = { core = true },
      },
    },
    ['/home/user/project_2'] = {
      ['home/user/project_1/file'] = {
        count = 0, latest = 0, labels = { other = true },
      },
      ['home/user/project_2/README'] = { count = 1, latest = 1699798000 },
    },
  }
  ```

#### Storage {#minivisits-index-specification-storage}


When stored on disk, visit index is a file containing Lua code returning
visit index table. It can be edited by hand as long as it contains a valid
Lua code (to be executed with [dofile()](https://neovim.io/doc/user/helptag.html?tag=dofile\(\))).

Notes:

- Storage is implemented in such a way that it doesn't really support more
  than one parallel Neovim processes. Meaning that if there are two or more
  simultaneous Neovim processes with same visit index storage path, the last
  one writing to it will preserve its visit history while others - won't.

#### Normalization {#minivisits-index-specification-normalization}


To ensure that visit index contains mostly relevant data, it gets normalized:
automatically inside [MiniVisits.write\_index()](mini-visits.qmd#minivisits.write_index) or
via [MiniVisits.normalize\_index()](mini-visits.qmd#minivisits.normalize_index).

What normalization actually does can be configured in `config.store.normalize`.

See [MiniVisits.gen\_normalize.default()](mini-visits.qmd#minivisits.gen_normalize.default) for default normalization approach.

---

### Examples {#minivisits-examples .help-syntax-right-anchor}

This module provides a flexible framework for working with file system visits.
Exact choice of how to organize workflow is left to the user.
Here are some examples for inspiration which can be combined together.

#### Use different sorting {#minivisits-examples-usedifferentsorting}


Default sorting in [MiniVisits.gen\_sort.default()](mini-visits.qmd#minivisits.gen_sort.default) allows flexible adjustment
of which feature to prefer more: recency or frequency. Here is an example of
how to make set of keymaps for three types of sorting combined with two types
of scopes (all visits and only for current cwd):

  ```lua
  local make_select_path = function(select_global, recency_weight)
    local visits = require('mini.visits')
    local sort = visits.gen_sort.default({ recency_weight = recency_weight })
    local select_opts = { sort = sort }
    return function()
      local cwd = select_global and '' or vim.fn.getcwd()
      visits.select_path(cwd, select_opts)
    end
  end

  local map = function(lhs, desc, ...)
    vim.keymap.set('n', lhs, make_select_path(...), { desc = desc })
  end

  -- Adjust LHS and description to your liking
  map('<Leader>vr', 'Select recent (all)',   true,  1)
  map('<Leader>vR', 'Select recent (cwd)',   false, 1)
  map('<Leader>vy', 'Select frecent (all)',  true,  0.5)
  map('<Leader>vY', 'Select frecent (cwd)',  false, 0.5)
  map('<Leader>vf', 'Select frequent (all)', true,  0)
  map('<Leader>vF', 'Select frequent (cwd)', false, 0)
  ```

Note: If using [mini.pick](mini-pick.qmd#mini.pick), consider [MiniExtra.pickers.visit\_paths()](mini-extra.qmd#miniextra.pickers.visit_paths).

#### Use manual labels {#minivisits-examples-usemanuallabels}


Labels is a powerful tool to create groups of associated paths.
Usual workflow consists of:

- Add label with [MiniVisits.add\_label()](mini-visits.qmd#minivisits.add_label) (prompts for actual label).

- Remove label with [MiniVisits.remove\_label()](mini-visits.qmd#minivisits.remove_label) (prompts for actual label).

- When need to use labeled groups, call [MiniVisits.select\_label()](mini-visits.qmd#minivisits.select_label) which
  will then call [MiniVisits.select\_path()](mini-visits.qmd#minivisits.select_path) to select path among those
  having selected label.
  Note: If using [mini.pick](mini-pick.qmd#mini.pick), consider [MiniExtra.pickers.visit\_labels()](mini-extra.qmd#miniextra.pickers.visit_labels).

To make this workflow smoother, here is an example of keymaps:

  ```lua
  local map_vis = function(keys, call, desc)
    local rhs = '<Cmd>lua MiniVisits.' .. call .. '<CR>'
    vim.keymap.set('n', '<Leader>' .. keys, rhs, { desc = desc })
  end

  map_vis('vv', 'add_label()',          'Add label')
  map_vis('vV', 'remove_label()',       'Remove label')
  map_vis('vl', 'select_label("", "")', 'Select label (all)')
  map_vis('vL', 'select_label()',       'Select label (cwd)')
  ```

#### Use fixed labels {#minivisits-examples-usefixedlabels}


During work on every project there is usually a handful of files where core
activity is concentrated. This can be made easier by creating mappings
which add/remove special fixed label (for example, "core") and select paths
with that label for both all and current cwd. Example:

  ```lua
  -- Create and select
  local map_vis = function(keys, call, desc)
    local rhs = '<Cmd>lua MiniVisits.' .. call .. '<CR>'
    vim.keymap.set('n', '<Leader>' .. keys, rhs, { desc = desc })
  end

  map_vis('vv', 'add_label("core")',                     'Add to core')
  map_vis('vV', 'remove_label("core")',                  'Remove from core')
  map_vis('vc', 'select_path("", { filter = "core" })',  'Select core (all)')
  map_vis('vC', 'select_path(nil, { filter = "core" })', 'Select core (cwd)')

  -- Iterate based on recency
  local sort_latest = MiniVisits.gen_sort.default({ recency_weight = 1 })
  local map_iterate_core = function(lhs, direction, desc)
    local opts = { filter = 'core', sort = sort_latest, wrap = true }
    local rhs = function()
      MiniVisits.iterate_paths(direction, vim.fn.getcwd(), opts)
    end
    vim.keymap.set('n', lhs, rhs, { desc = desc })
  end

  map_iterate_core('[{', 'last',     'Core label (earliest)')
  map_iterate_core('[[', 'forward',  'Core label (earlier)')
  map_iterate_core(']]', 'backward', 'Core label (later)')
  map_iterate_core(']}', 'first',    'Core label (latest)')
  ```

#### Use automated labels {#minivisits-examples-useautomatedlabels}


When using version control system (such as Git), usually there is already
an identifier that groups files you are working with - branch name.
Here is an example of keymaps to add/remove label equal to branch name:

  ```lua
  local map_branch = function(keys, action, desc)
    local rhs = function()
      local branch = vim.fn.system('git rev-parse --abbrev-ref HEAD')
      if vim.v.shell_error ~= 0 then return nil end
      branch = vim.trim(branch)
      require('mini.visits')[action](branch)
    end
    vim.keymap.set('n', '<Leader>' .. keys, rhs, { desc = desc })
  end

  map_branch('vb', 'add_label',    'Add branch label')
  map_branch('vB', 'remove_label', 'Remove branch label')
  ```

---

### setup() {#minivisits.setup .help-syntax-right-anchor}

<p align="center">`MiniVisits.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minivisits.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [MiniVisits.config](mini-visits.qmd#minivisits.config).

#### Usage {#minivisits.setup-usage}



  ```lua
  require('mini.visits').setup() -- use default config
  -- OR
  require('mini.visits').setup({}) -- replace {} with your config table
  ```

---

### config {#minivisits.config .help-syntax-right-anchor}

<p align="center">`MiniVisits.config`</p>
#### Defaults {#minivisits.config-defaults}



  ```lua
  MiniVisits.config = {
    -- How visit index is converted to list of paths
    list = {
      -- Predicate for which paths to include (all by default)
      filter = nil,

      -- Sort paths based on the visit data (robust frecency by default)
      sort = nil,
    },

    -- Whether to disable showing non-error feedback
    silent = false,

    -- How visit index is stored
    store = {
      -- Whether to write all visits before Neovim is closed
      autowrite = true,

      -- Function to ensure that written index is relevant
      normalize = nil,

      -- Path to store visit index
      path = vim.fn.stdpath('data') .. '/mini-visits-index',
    },

    -- How visit tracking is done
    track = {
      -- Start visit register timer at this event
      -- Supply empty string (`''`) to not do this automatically
      event = 'BufEnter',

      -- Debounce delay after event to register a visit
      delay = 1000,
    },
  }
  ```

#### List {#minivisits.config-list}


<a name="minivisits.config.list" href="mini-visits.qmd#minivisits.config.list"><b>MiniVisits.config.list</b></a>

`config.list` defines how visit index is converted to a path list by default.

`list.filter` is a callable which should take a path data and return `true` if
this path should be present in the list.
Default: output of [MiniVisits.gen\_filter.default()](mini-visits.qmd#minivisits.gen_filter.default).

Path data is a table with at least these fields:

- <span class="help-syntax-keys">\<path\></span> `(string)` - absolute path of visit.

- <span class="help-syntax-keys">\<count\></span> `(number)` - number of visits.

- <span class="help-syntax-keys">\<latest\></span> `(number)` - timestamp of latest visit.

- <span class="help-syntax-keys">\<labels\></span> `(table|nil)` - table of labels (has string keys with `true` values).

Notes:

- Both `count` and `latest` (in theory) can be any number. But built-in tracking
  results into positive integer `count` and `latest` coming from [os.time()](https://neovim.io/doc/user/helptag.html?tag=os.time\(\)).

- There can be other entries if they are set by user as index entry.

`list.sort` is a callable which should take an array of path data and return
a sorted array of path data (or at least tables each containing <span class="help-syntax-keys">\<path\></span> field).
Default: output of [MiniVisits.gen\_sort.default()](mini-visits.qmd#minivisits.gen_sort.default).
Single path data entry is a table with a same structure as for `list.filter`.

Note, that `list.sort` can be used both to filter, sort, or even return paths
unrelated to the input.

#### Silent {#minivisits.config-silent}


`config.silent` is a boolean controlling whether to show non-error feedback
(like adding/removing labels, etc.). Default: `false`.

#### Store {#minivisits.config-store}


`config.store` defines how visit index is stored on disk to enable persistent
data across several sessions.

`store.autowrite` is a boolean controlling whether to write visit data to
disk on [VimLeavePre](https://neovim.io/doc/user/helptag.html?tag=VimLeavePre) event. Default: `true`.

`store.normalize` is a callable which should take visit index
(see [MiniVisits-index-specification](mini-visits.qmd#minivisits-index-specification)) as input and return "normalized" visit
index as output. This is used to ensure that visit index is up to date and
contains only relevant data. For example, it controls how old and
irrelevant visits are "forgotten", and more.
Default: output of [MiniVisits.gen\_normalize.default()](mini-visits.qmd#minivisits.gen_normalize.default).

`store.path` is a path to which visit index is written. See "Storage" section
of [MiniVisits-index-specification](mini-visits.qmd#minivisits-index-specification) for more details.
Note: set to empty string to disable any writing with not explicitly set
path (including the one on [VimLeavePre](https://neovim.io/doc/user/helptag.html?tag=VimLeavePre)).
Default: "mini-visits-index" file inside [\$XDG\_DATA\_HOME](https://neovim.io/doc/user/helptag.html?tag=$XDG_DATA_HOME).

#### Track {#minivisits.config-track}


`config.track` defines how visits are tracked (index entry is autoupdated).
See "Tracking visits" section in [MiniVisits-overview](mini-visits.qmd#minivisits-overview) for more details.

`track.event` is a proper Neovim [<span class="help-syntax-special">{event}</span>](https://neovim.io/doc/user/helptag.html?tag={event}) on which track get triggered.
Note: set to empty string to disable automated tracking.
Default: [BufEnter](https://neovim.io/doc/user/helptag.html?tag=BufEnter).

`track.delay` is a delay in milliseconds after event is triggered and visit
is autoregistered.
Default: 1000 (to allow navigation between buffers without tracking
intermediate ones).

---

### register_visit() {#minivisits.register_visit .help-syntax-right-anchor}

<p align="center">`MiniVisits.register_visit`(<span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>)</p>
Register visit

Steps:

- Ensure that there is an entry for path-cwd pair.

- Add 1 to visit `count`.

- Set `latest` visit time to equal current time.

#### Parameters {#minivisits.register_visit-parameters}



<span class="help-syntax-special">{path}</span> `(string|nil)` Visit path. Default: path of current buffer if normal,
  error otherwise.

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

---

### add_path() {#minivisits.add_path .help-syntax-right-anchor}

<p align="center">`MiniVisits.add_path`(<span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>)</p>
Add path to index

Ensures that there is a (one or more) entry for path-cwd pair. If entry is
already present, does nothing. If not - creates it with both `count` and
`latest` set to 0.

#### Parameters {#minivisits.add_path-parameters}



<span class="help-syntax-special">{path}</span> `(string|nil)` Visit path. Can be empty string to mean "all visited
  paths for `cwd`". Default: path of current buffer if normal, error otherwise.

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Can be empty string to mean
  "all visited cwd". Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

---

### add_label() {#minivisits.add_label .help-syntax-right-anchor}

<p align="center">`MiniVisits.add_label`(<span class="help-syntax-special">{label}</span>, <span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>)</p>
Add label to path

Steps:

- Ensure that there is an entry for path-cwd pair.

- Add label to the entry.

#### Parameters {#minivisits.add_label-parameters}



<span class="help-syntax-special">{label}</span> `(string|nil)` Label string. Default: `nil` to ask from user.

<span class="help-syntax-special">{path}</span> `(string|nil)` Visit path. Can be empty string to mean "all visited
  paths for `cwd`". Default: path of current buffer if normal, error otherwise.

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Can be empty string to mean
  "all visited cwd". Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

---

### remove_path() {#minivisits.remove_path .help-syntax-right-anchor}

<p align="center">`MiniVisits.remove_path`(<span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>)</p>
Remove path

Deletes a (one or more) entry for path-cwd pair from an index. If entry is
already absent, does nothing.

Notes:

- Affects only in-session Lua variable. Call [MiniVisits.write\_index()](mini-visits.qmd#minivisits.write_index) to
  make it persistent.

#### Parameters {#minivisits.remove_path-parameters}



<span class="help-syntax-special">{path}</span> `(string|nil)` Visit path. Can be empty string to mean "all visited
  paths for `cwd`". Default: path of current buffer if normal, error otherwise.

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Can be empty string to mean
  "all visited cwd". Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

---

### remove_label() {#minivisits.remove_label .help-syntax-right-anchor}

<p align="center">`MiniVisits.remove_label`(<span class="help-syntax-special">{label}</span>, <span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>)</p>
Remove label from path

Steps:

- Remove label from (one or more) index entry.

- If it was last label in an entry, remove `labels` key.

#### Parameters {#minivisits.remove_label-parameters}



<span class="help-syntax-special">{label}</span> `(string|nil)` Label string. Default: `nil` to ask from user.

<span class="help-syntax-special">{path}</span> `(string|nil)` Visit path. Can be empty string to mean "all visited
  paths for `cwd`". Default: path of current buffer if normal, error otherwise.

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Can be empty string to mean
  "all visited cwd". Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

---

### list_paths() {#minivisits.list_paths .help-syntax-right-anchor}

<p align="center">`MiniVisits.list_paths`(<span class="help-syntax-special">{cwd}</span>, <span class="help-syntax-special">{opts}</span>)</p>
List visit paths

Convert visit index for certain cwd into an ordered list of visited paths.
Supports custom filtering and sorting.

Examples:

  ```lua
  -- Get paths sorted from most to least recent
  local sort_recent = MiniVisits.gen_sort.default({ recency_weight = 1 })
  MiniVisits.list_paths(nil, { sort = sort_recent })

  -- Get paths from all cwd sorted from most to least frequent
  local sort_frequent = MiniVisits.gen_sort.default({ recency_weight = 0 })
  MiniVisits.list_paths('', { sort = sort_frequent })

  -- Get paths not including hidden
  local is_not_hidden = function(path_data)
    return not vim.startswith(vim.fn.fnamemodify(path_data.path, ':t'), '.')
  end
  MiniVisits.list_paths(nil, { filter = is_not_hidden })
  ```

#### Parameters {#minivisits.list_paths-parameters}



<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Can be empty string to mean
  "all visited cwd". Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<filter\></span> `(function)` - predicate to filter paths. For more information
    about how it is used, see [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list).
    Default: value of `config.list.filter` with [MiniVisits.gen\_filter.default()](mini-visits.qmd#minivisits.gen_filter.default)
    as its default.

  - <span class="help-syntax-keys">\<sort\></span> `(function)` - path data sorter. For more information about how
    it is used, see [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list).
    Default: value of `config.list.sort` or [MiniVisits.gen\_sort.default()](mini-visits.qmd#minivisits.gen_sort.default)
    as its default.

#### Return {#minivisits.list_paths-return}


`(table)` Array of visited paths.

---

### list_labels() {#minivisits.list_labels .help-syntax-right-anchor}

<p align="center">`MiniVisits.list_labels`(<span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>, <span class="help-syntax-special">{opts}</span>)</p>
List visit labels

Convert visit index for certain path-cwd pair into an ordered list of labels.
Supports custom filtering for paths. Result is ordered from most to least
frequent label.

Examples:

  ```lua
  -- Get labels for current path-cwd pair
  MiniVisits.list_labels()

  -- Get labels for current path across all cwd
  MiniVisits.list_labels(nil, '')

  -- Get all available labels excluding ones from hidden files
  local is_not_hidden = function(path_data)
    return not vim.startswith(vim.fn.fnamemodify(path_data.path, ':t'), '.')
  end
  MiniVisits.list_labels('', '', { filter = is_not_hidden })
  ```

#### Parameters {#minivisits.list_labels-parameters}



<span class="help-syntax-special">{path}</span> `(string|nil)` Visit path. Can be empty string to mean "all visited
  paths for `cwd`". Default: path of current buffer if normal, error otherwise.

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Visit cwd (project directory). Can be empty string to mean
  "all visited cwd". Default: [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<filter\></span> `(function)` - predicate to filter paths. For more information
    about how it is used, see [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list).
    Default: value of `config.list.filter` with [MiniVisits.gen\_filter.default()](mini-visits.qmd#minivisits.gen_filter.default)
    as its default.

  - <span class="help-syntax-keys">\<sort\></span> `(function)` - path data sorter. For more information about how
    it is used, see [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list).
    Default: value of `config.list.sort` or [MiniVisits.gen\_sort.default()](mini-visits.qmd#minivisits.gen_sort.default)
    as its default.

#### Return {#minivisits.list_labels-return}


`(table)` Array of available labels.

---

### select_path() {#minivisits.select_path .help-syntax-right-anchor}

<p align="center">`MiniVisits.select_path`(<span class="help-syntax-special">{cwd}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Select visit path

Uses [vim.ui.select()](https://neovim.io/doc/user/helptag.html?tag=vim.ui.select\(\)) with an output of [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths) and
calls [:edit](https://neovim.io/doc/user/helptag.html?tag=:edit) on the chosen item.

Note: if you have [mini.pick](mini-pick.qmd#mini.pick), consider using [MiniExtra.pickers.visit\_labels()](mini-extra.qmd#miniextra.pickers.visit_labels)
and [MiniExtra.pickers.visit\_paths()](mini-extra.qmd#miniextra.pickers.visit_paths).

Examples:


- Select from all visited paths: `MiniVisits.select_path('')`


- Select from paths under current directory sorted from most to least recent:

    ```lua
    local sort_recent = MiniVisits.gen_sort.default({ recency_weight = 1 })
    MiniVisits.select_path(nil, { sort = sort_recent })
    ```

#### Parameters {#minivisits.select_path-parameters}



<span class="help-syntax-special">{cwd}</span> `(string|nil)` Forwarded to [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Forwarded to [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths).

---

### select_label() {#minivisits.select_label .help-syntax-right-anchor}

<p align="center">`MiniVisits.select_label`(<span class="help-syntax-special">{path}</span>, <span class="help-syntax-special">{cwd}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Select visit label

Uses [vim.ui.select()](https://neovim.io/doc/user/helptag.html?tag=vim.ui.select\(\)) with an output of [MiniVisits.list\_labels()](mini-visits.qmd#minivisits.list_labels) and
calls [MiniVisits.select\_path()](mini-visits.qmd#minivisits.select_path) to get target paths with selected label.

Note: if you have [mini.pick](mini-pick.qmd#mini.pick), consider using [MiniExtra.pickers.visit\_labels()](mini-extra.qmd#miniextra.pickers.visit_labels).

Examples:


- Select from labels of current path: `MiniVisits.select_label()`


- Select from all visited labels: `MiniVisits.select_label('', '')`


- Select from current project labels and sort paths (after choosing) from most
  to least recent:

    ```lua
    local sort_recent = MiniVisits.gen_sort.default({ recency_weight = 1 })
    MiniVisits.select_label('', nil, { sort = sort_recent })
    ```

#### Parameters {#minivisits.select_label-parameters}



<span class="help-syntax-special">{path}</span> `(string|nil)` Forwarded to [MiniVisits.list\_labels()](mini-visits.qmd#minivisits.list_labels).

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Forwarded to [MiniVisits.list\_labels()](mini-visits.qmd#minivisits.list_labels).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Forwarded to both [MiniVisits.list\_labels()](mini-visits.qmd#minivisits.list_labels)
 and [MiniVisits.select\_path()](mini-visits.qmd#minivisits.select_path) (after choosing a label).

---

### iterate_paths() {#minivisits.iterate_paths .help-syntax-right-anchor}

<p align="center">`MiniVisits.iterate_paths`(<span class="help-syntax-special">{direction}</span>, <span class="help-syntax-special">{cwd}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Iterate visit paths

Steps:

- Compute a sorted array of target paths using [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths).

- Identify the current index inside the array based on path of current buffer.

- Iterate through the array certain amount of times in a dedicated direction:

    - For "first" direction - forward starting from index 0 (so that single
      first iteration leads to first path).

    - For "backward" direction - backward starting from current index.

    - For "forward" direction - forward starting from current index.

    - For "last" direction - backward starting from index after the last one
      (so that single first iteration leads to the last path).

Notes:

- Mostly designed to be used as a mapping. See `MiniVisits-examples`.

- If path from current buffer is not in the output of `MiniVisits.list_paths()`,
  starting index is inferred such that first iteration lands on first item
  (if iterating forward) or last item (if iterating backward).

- Navigation with this function is not tracked (see [MiniVisits-overview](mini-visits.qmd#minivisits-overview)).
  This is done to allow consecutive application without affecting
  underlying list of paths.

Examples assuming underlying array of files `{ "file1", "file2", "file3" }`:


- `MiniVisits("first")` results into focusing on "file1".

- `MiniVisits("backward", { n_times = 2 })` from "file3" results into "file1".

- `MiniVisits("forward", { n_times = 10 })` from "file1" results into "file3".

- `MiniVisits("last", { n_times = 4, wrap = true })` results into "file3".

#### Parameters {#minivisits.iterate_paths-parameters}



<span class="help-syntax-special">{direction}</span> `(string)` One of "first", "backward", "forward", "last".

<span class="help-syntax-special">{cwd}</span> `(string|nil)` Forwarded to [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<filter\></span> `(function)` - forwarded to [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths).

  - <span class="help-syntax-keys">\<sort\></span> `(function)` - forwarded to [MiniVisits.list\_paths()](mini-visits.qmd#minivisits.list_paths).

  - <span class="help-syntax-keys">\<n_times\></span> `(number)` - number of steps to go in certain direction.
    Default: [v:count1](https://neovim.io/doc/user/helptag.html?tag=v:count1).

  - <span class="help-syntax-keys">\<wrap\></span> `(boolean)` - whether to wrap around list edges. Default: `false`.

---

### get_index() {#minivisits.get_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.get_index`()</p>
Get active visit index

#### Return {#minivisits.get_index-return}


`(table)` Copy of currently active visit index table.

---

### set_index() {#minivisits.set_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.set_index`(<span class="help-syntax-special">{index}</span>)</p>
Set active visit index

#### Parameters {#minivisits.set_index-parameters}



<span class="help-syntax-special">{index}</span> `(table)` Visit index table.

---

### reset_index() {#minivisits.reset_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.reset_index`()</p>
Reset active visit index

Set currently active visit index to the output of [MiniVisits.read\_index()](mini-visits.qmd#minivisits.read_index).
Does nothing if reading the index failed.

---

### normalize_index() {#minivisits.normalize_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.normalize_index`(<span class="help-syntax-special">{index}</span>)</p>
Normalize visit index

Applies `config.store.normalize` ([MiniVisits.gen\_normalize.default()](mini-visits.qmd#minivisits.gen_normalize.default) by default)
to the input index object and returns the output (if it fits in the definition
of index object; see [MiniVisits-index-specification](mini-visits.qmd#minivisits-index-specification)).

#### Parameters {#minivisits.normalize_index-parameters}



<span class="help-syntax-special">{index}</span> `(table|nil)` Index object. Default: copy of the current index.

#### Return {#minivisits.normalize_index-return}


`(table)` Normalized index object.

---

### read_index() {#minivisits.read_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.read_index`(<span class="help-syntax-special">{store_path}</span>)</p>
Read visit index from disk

#### Parameters {#minivisits.read_index-parameters}



<span class="help-syntax-special">{store_path}</span> `(string|nil)` Path on the disk containing visit index data.
  Default: `config.store.path`.
  Notes:

  - Can return `nil` if path is empty string or file is not readable.

  - File is sourced with [dofile()](https://neovim.io/doc/user/helptag.html?tag=dofile\(\)) as a regular Lua file.

#### Return {#minivisits.read_index-return}


`(table|nil)` Output of the file source.

---

### write_index() {#minivisits.write_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.write_index`(<span class="help-syntax-special">{store_path}</span>, <span class="help-syntax-special">{index}</span>)</p>
Write visit index to disk

Steps:

- Normalize index with [MiniVisits.normalize\_index()](mini-visits.qmd#minivisits.normalize_index).

- Ensure path is valid (all parent directories are created, etc.).

- Write index object to the path so that it is readable
  with [MiniVisits.read\_index()](mini-visits.qmd#minivisits.read_index).

#### Parameters {#minivisits.write_index-parameters}



<span class="help-syntax-special">{store_path}</span> `(string|nil)` Path on the disk where to write visit index data.
  Default: `config.store.path`. Note: if empty string, nothing is written.

<span class="help-syntax-special">{index}</span> `(table|nil)` Index object to write to disk.
  Default: current session index.

---

### rename_in_index() {#minivisits.rename_in_index .help-syntax-right-anchor}

<p align="center">`MiniVisits.rename_in_index`(<span class="help-syntax-special">{path_from}</span>, <span class="help-syntax-special">{path_to}</span>, <span class="help-syntax-special">{index}</span>)</p>
Rename path in index

A helper to react for a path rename/move in order to preserve its visit data.
It works both for file and directory paths.

Notes:

- It does not update current index, but returns a modified index object.
  Use [MiniVisits.set\_index()](mini-visits.qmd#minivisits.set_index) to make it current.

- Use only full paths.

- Do not append `/` to directory paths. Use same format as for files.

Assuming `path_from` and `path_to` are variables containing full paths
before and after rename/move, here is an example to update current index:

  ```lua
  local new_index = MiniVisits.rename_in_index(path_from, path_to)
  MiniVisits.set_index(new_index)
  ```

#### Parameters {#minivisits.rename_in_index-parameters}



<span class="help-syntax-special">{path_from}</span> `(string)` Full path to be renamed.

<span class="help-syntax-special">{path_to}</span> `(string)` Full path to be replaced with.

<span class="help-syntax-special">{index}</span> `(table|nil)` Index object inside which to perform renaming.
  Default: current session index.

#### Return {#minivisits.rename_in_index-return}


`(table)` Index object with renamed path.

---

### gen_filter {#minivisits.gen_filter .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_filter`</p>
Generate filter function

This is a table with function elements. Call to actually get specification.

---

### gen_filter.default() {#minivisits.gen_filter.default .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_filter.default`()</p>
Default filter

Always returns `true` resulting in no actual filter.

#### Return {#minivisits.gen_filter.default-return}


`(function)` Visit filter function. See [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list) for more details.

---

### gen_filter.this_session() {#minivisits.gen_filter.this_session .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_filter.this_session`()</p>
Filter visits from current session

#### Return {#minivisits.gen_filter.this_session-return}


`(function)` Visit filter function. See [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list) for more details.

---

### gen_sort {#minivisits.gen_sort .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_sort`</p>
Generate sort function

This is a table with function elements. Call to actually get specification.

---

### gen_sort.default() {#minivisits.gen_sort.default .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_sort.default`(<span class="help-syntax-special">{opts}</span>)</p>
Default sort

Sort paths using "robust frecency" approach. It relies on the rank operation:
based on certain reference number for every item, assign it a number
between 1 (best) and number of items (worst). Ties are dealt with "average
rank" approach: each element with a same reference number is assigned
an average rank among such elements. This way total rank sum depends only
on number of paths.

Here is an algorithm outline:

- Rank paths based on frequency (`count` value): from most to least frequent.

- Rank paths based on recency (`latest` value): from most to least recent.

- Combine ranks from previous steps with weights:
  `score = (1 - w) * rank_frequency + w * rank_recency`, where `w` is
  "recency weight". The smaller this weight the less recency affects outcome.

Examples:

- Default recency weight 0.5 results into "robust frecency" sorting: it
  combines both frequency and recency.
  This is called a "robust frecency" because actual values don't have direct
  effect on the outcome, only ordering matters. For example, if there is
  a very frequent file with `count = 100` while all others have `count = 5`,
  it will not massively dominate the outcome as long as it is not very recent.


- Having recency weight 1 results into "from most to least recent" sorting.


- Having recency weight 0 results into "from most to least frequent" sorting.

#### Parameters {#minivisits.gen_sort.default-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Option. Possible fields:

  - <span class="help-syntax-keys">\<recency_weight\></span> `(number)` - a number between 0 and 1 for recency weight.
    Default: 0.5.

#### Return {#minivisits.gen_sort.default-return}


`(function)` Visit sort function. See [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list) for more details.

---

### gen_sort.z() {#minivisits.gen_sort.z .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_sort.z`()</p>
Z sort

Sort as in https://github.com/rupa/z.

#### Return {#minivisits.gen_sort.z-return}


`(function)` Visit sort function. See [MiniVisits.config.list](mini-visits.qmd#minivisits.config.list) for more details.

---

### gen_normalize {#minivisits.gen_normalize .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_normalize`</p>
Generate normalize function

This is a table with function elements. Call to actually get specification.

---

### gen_normalize.default() {#minivisits.gen_normalize.default .help-syntax-right-anchor}

<p align="center">`MiniVisits.gen_normalize.default`(<span class="help-syntax-special">{opts}</span>)</p>
Generate default normalize function

Steps:

- Prune visits, i.e. remove outdated visits:

    - If `count` number of visits is below prune threshold, remove that visit
      entry from particular cwd (it can still be present in others).

    - If either first (cwd) or second (path) level key doesn't represent an
      actual path on disk, remove the whole associated value.

    - NOTE: if visit has any label, it is not automatically pruned.


- Decay visits, i.e. possibly make visits more outdated. This is an important
  part to the whole usability: together with pruning it results into automated
  removing of paths which were visited long ago and are not relevant.

  Decay is done per cwd if its total `count` values sum exceeds decay threshold.
  It is performed through multiplying each `count` by same coefficient so that
  the new total sum of `count` is equal to some smaller target value.
  Note: only two decimal places are preserved, so the sum might not be exact.


- Prune once more to ensure that there are no outdated paths after decay.

#### Parameters {#minivisits.gen_normalize.default-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<decay_threshold\></span> `(number)` - decay threshold. Default: 1000.

  - <span class="help-syntax-keys">\<decay_target\></span> `(number)` - decay target. Default: 800.

  - <span class="help-syntax-keys">\<prune_threshold\></span> `(number)` - prune threshold. Default: 0.5.

  - <span class="help-syntax-keys">\<prune_paths\></span> `(boolean)` - whether to prune outdated paths. Default: `true`.

#### Return {#minivisits.gen_normalize.default-return}


`(function)` Visit index normalize function. See "Store" in [MiniVisits.config](mini-visits.qmd#minivisits.config).

