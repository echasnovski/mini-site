---
title: "mini.extra documentation"
toc-depth: 5
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.extra" href="mini-extra.qmd#mini.extra"><b>mini.extra</b></a> Extra 'mini.nvim' functionality

MIT License Copyright (c) 2023 Evgeni Chasnovski

---

### Module {#miniextra}

Extra useful functionality which is not essential enough for other 'mini.nvim'
modules to include directly.

Features:


- Various pickers for [`mini.pick`](mini-pick.qmd#mini.pick):

    - Built-in diagnostic ([`MiniExtra.pickers.diagnostic()`](mini-extra.qmd#miniextra.pickers.diagnostic)).

    - File explorer ([`MiniExtra.pickers.explorer()`](mini-extra.qmd#miniextra.pickers.explorer)).

    - Git branches/commits/files/hunks ([`MiniExtra.pickers.git_hunks()`](mini-extra.qmd#miniextra.pickers.git_hunks), etc.).

    - Command/search/input history ([`MiniExtra.pickers.history()`](mini-extra.qmd#miniextra.pickers.history)).

    - LSP references/symbols/etc. ([`MiniExtra.pickers.lsp()`](mini-extra.qmd#miniextra.pickers.lsp)).

    - Tree-sitter nodes ([`MiniExtra.pickers.treesitter()`](mini-extra.qmd#miniextra.pickers.treesitter)).

    - And much more.
  See [`MiniExtra.pickers`](mini-extra.qmd#miniextra.pickers) for more.


- Various textobject specifications for [`mini.ai`](mini-ai.qmd#mini.ai). See [`MiniExtra.gen_ai_spec`](mini-extra.qmd#miniextra.gen_ai_spec).


- Various highlighters for [`mini.hipatterns`](mini-hipatterns.qmd#mini.hipatterns). See [`MiniExtra.gen_highlighter`](mini-extra.qmd#miniextra.gen_highlighter).

Notes:

- This module requires only those 'mini.nvim' modules which are needed for
  a particular functionality: 'mini.pick' for pickers, etc.

#### Setup {#miniextra-setup}


This module needs a setup with `require('mini.extra').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniExtra`
which you can use for scripting or manually (with `:lua MiniExtra.*`).

See [`MiniExtra.config`](mini-extra.qmd#miniextra.config) for `config` structure and default values.

This module doesn't have runtime options, so using `vim.b.miniextra_config`
will have no effect here.

#### Comparisons {#miniextra-comparisons}



- [nvim-telescope/telescope.nvim](https://github.com/nvim-telescope/telescope.nvim):

    - With [`MiniExtra.pickers`](mini-extra.qmd#miniextra.pickers), 'mini.pick' is reasonably on par when it comes
      to built-in pickers.


- [ibhagwan/fzf-lua](https://github.com/ibhagwan/fzf-lua):

    - Same as 'nvim-telescope/telescope.nvim'.

---

### setup() {#miniextra.setup}

<p align="center">`MiniExtra.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#miniextra.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [`MiniExtra.config`](mini-extra.qmd#miniextra.config).

#### Usage {#miniextra.setup-usage}



  ```lua
  require('mini.extra').setup() -- use default config
  -- OR
  require('mini.extra').setup({}) -- replace {} with your config table
  ```

---

### config {#miniextra.config}

<p align="center">`MiniExtra.config`</p>
#### Defaults {#miniextra.config-defaults}



  ```lua
  MiniExtra.config = {}
  ```

---

### gen_ai_spec {#miniextra.gen_ai_spec}

<p align="center">`MiniExtra.gen_ai_spec`</p>
[`mini.ai`](mini-ai.qmd#mini.ai) textobject specification generators

This is a table with function elements. Call to actually get specification.

Assumed to be used as part of [`MiniAi.setup()`](mini-ai.qmd#miniai.setup). Example:

  ```lua
  local gen_ai_spec = require('mini.extra').gen_ai_spec
  require('mini.ai').setup({
    custom_textobjects = {
      B = gen_ai_spec.buffer(),
      D = gen_ai_spec.diagnostic(),
      I = gen_ai_spec.indent(),
      L = gen_ai_spec.line(),
      N = gen_ai_spec.number(),
    },
  })
  ```

---

### gen_ai_spec.buffer() {#miniextra.gen_ai_spec.buffer}

<p align="center">`MiniExtra.gen_ai_spec.buffer`()</p>
Current buffer textobject

Notes:

- `a` textobject selects all lines in a buffer.

- `i` textobject selects all lines except blank lines at start and end.

#### Return {#miniextra.gen_ai_spec.buffer-return}


`(function)` Function implementing [`MiniAi-textobject-specification`](mini-ai.qmd#miniai-textobject-specification).

---

### gen_ai_spec.diagnostic() {#miniextra.gen_ai_spec.diagnostic}

<p align="center">`MiniExtra.gen_ai_spec.diagnostic`(<span class="help-syntax-special">{severity}</span>)</p>
Current buffer diagnostic textobject

Notes:

- Both `a` and `i` textobjects return [`vim.diagnostic.get()`](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic.get\(\)) output for the
  current buffer. It is modified to fit [`MiniAi-textobject-specification`](mini-ai.qmd#miniai-textobject-specification).

#### Parameters {#miniextra.gen_ai_spec.diagnostic-parameters}



<span class="help-syntax-special">{severity}</span> `(any)` Which severity to use. Forwarded to [`vim.diagnostic.get()`](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic.get\(\)).
  Default: `nil` to use all diagnostic entries.

#### Return {#miniextra.gen_ai_spec.diagnostic-return}


`(function)` Function implementing [`MiniAi-textobject-specification`](mini-ai.qmd#miniai-textobject-specification).

---

### gen_ai_spec.indent() {#miniextra.gen_ai_spec.indent}

<p align="center">`MiniExtra.gen_ai_spec.indent`()</p>
Current buffer indent scopes textobject

Indent scope is a set of consecutive lines with the following properties:

- Lines above first and below last are non-blank. They are called borders.

- There is at least one non-blank line in a set.

- All non-blank lines between borders have strictly greater indent
  (perceived leading space respecting [`'tabstop'`](https://neovim.io/doc/user/helptag.html?tag='tabstop')) than either of borders.

Notes:

- `a` textobject selects scope including borders.

- `i` textobject selects the scope charwise.

- Differences with [`MiniIndentscope.textobject()`](mini-indentscope.qmd#miniindentscope.textobject):

    - This textobject always treats blank lines on top and bottom of `i`
      textobject as part of it, while 'mini.indentscope' can configure that.

    - This textobject can select non-covering scopes, while 'mini.indentscope'
      can not (by design).

    - In this textobject scope computation is done only by "casting rays" from
      top to bottom and not in both ways as in 'mini.indentscope'.
      This works in most common scenarios and doesn't work only if indent of
      of the bottom border is expected to be larger than the top.

#### Return {#miniextra.gen_ai_spec.indent-return}


`(function)` Function implementing [`MiniAi-textobject-specification`](mini-ai.qmd#miniai-textobject-specification).
  It returns array of regions representing all indent scopes in the buffer
  ordered increasingly by the start line.

---

### gen_ai_spec.line() {#miniextra.gen_ai_spec.line}

<p align="center">`MiniExtra.gen_ai_spec.line`()</p>
Current line textobject

Notes:

- `a` textobject selects whole line.

- `i` textobject selects line after initial indent.

#### Return {#miniextra.gen_ai_spec.line-return}


`(function)` Function implementing [`MiniAi-textobject-specification`](mini-ai.qmd#miniai-textobject-specification).

---

### gen_ai_spec.number() {#miniextra.gen_ai_spec.number}

<p align="center">`MiniExtra.gen_ai_spec.number`()</p>
Number textobject

Notes:

- `a` textobject selects a whole number possibly preceded with "-" and
  possibly followed by decimal part (dot and digits).

- `i` textobject selects consecutive digits.

#### Return {#miniextra.gen_ai_spec.number-return}


`(function)` Function implementing [`MiniAi-textobject-specification`](mini-ai.qmd#miniai-textobject-specification).

---

### gen_highlighter {#miniextra.gen_highlighter}

<p align="center">`MiniExtra.gen_highlighter`</p>
[`mini.hipatterns`](mini-hipatterns.qmd#mini.hipatterns) highlighter generators

This is a table with function elements. Call to actually get specification.

Assumed to be used as part of [`MiniHipatterns.setup()`](mini-hipatterns.qmd#minihipatterns.setup). Example:

  ```lua
  local hi_words = require('mini.extra').gen_highlighter.words
  require('mini.hipatterns').setup({
    highlighters = {
      todo = hi_words({ 'TODO', 'Todo', 'todo' }, 'MiniHipatternsTodo'),
    },
  })
  ```

---

### gen_highlighter.words() {#miniextra.gen_highlighter.words}

<p align="center">`MiniExtra.gen_highlighter.words`(<span class="help-syntax-special">{words}</span>, <span class="help-syntax-special">{group}</span>, <span class="help-syntax-special">{extmark_opts}</span>)</p>
Highlight words

Notes:

- Words should start and end with alphanumeric symbol (latin letter or digit).

- Words will be highlighted only in full and not if part bigger word, i.e.
  there should not be alphanumeric symbol before and after it.

#### Parameters {#miniextra.gen_highlighter.words-parameters}



<span class="help-syntax-special">{words}</span> `(table)` Array of words to highlight. Will be matched as is, not
  as Lua pattern.

<span class="help-syntax-special">{group}</span> `(string|function)` Proper `group` field for `highlighter`.
  See [`MiniHipatterns.config`](mini-hipatterns.qmd#minihipatterns.config).

<span class="help-syntax-special">{extmark_opts}</span> `(any)` Proper `extmark_opts` field for `highlighter`.
  See [`MiniHipatterns.config`](mini-hipatterns.qmd#minihipatterns.config).

---

### pickers {#miniextra.pickers}

<p align="center">`MiniExtra.pickers`</p>
[`mini.pick`](mini-pick.qmd#mini.pick) pickers

A table with 'mini.pick' pickers (which is a hard dependency).
Notes:

- All have the same signature:

    - <span class="help-syntax-keys">\<local_opts\></span> - optional table with options local to picker.

    - <span class="help-syntax-keys">\<opts\></span> - optional table with options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

- All of them are automatically registered in [`MiniPick.registry`](mini-pick.qmd#minipick.registry) inside
  both [`MiniExtra.setup()`](mini-extra.qmd#miniextra.setup) or [`MiniPick.setup()`](mini-pick.qmd#minipick.setup) (only one is enough).

- All use default versions of [`MiniPick-source.preview`](mini-pick.qmd#minipick-source.preview), [`MiniPick-source.choose`](mini-pick.qmd#minipick-source.choose),
  and [`MiniPick-source.choose_marked`](mini-pick.qmd#minipick-source.choose_marked) if not stated otherwise.
  Shown text and [`MiniPick-source.show`](mini-pick.qmd#minipick-source.show) are targeted to the picked items.

Examples of usage:

- As Lua code: `MiniExtra.pickers.buf_lines()`.

- With [`:Pick`](mini-pick.qmd#pick) command: `:Pick buf_lines scope='current'`
  Note: this requires calling [`MiniExtra.setup()`](mini-extra.qmd#miniextra.setup).

---

### pickers.buf_lines() {#miniextra.pickers.buf_lines}

<p align="center">`MiniExtra.pickers.buf_lines`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Buffer lines picker

Pick from buffer lines. Notes:

- Loads all target buffers which are currently unloaded.

#### Parameters {#miniextra.pickers.buf_lines-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - one of "all" (normal listed buffers) or "current".
    Default: "all".

  - <span class="help-syntax-keys">\<preserve_order\></span> `(boolean)` - whether to preserve original order
    during query. Default: `false`.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.buf_lines-return}


`(any)` Output of the called picker.

---

### pickers.colorschemes() {#miniextra.pickers.colorschemes}

<p align="center">`MiniExtra.pickers.colorschemes`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Color scheme picker

Pick and apply color scheme. Preview temporarily applies item's color scheme
and shows how selected highlight groups look.
Canceling reverts to color scheme before picker start:

- With [`MiniColors-colorscheme:apply()`](mini-colors.qmd#minicolors-colorschemeapply) if [`mini.colors`](mini-colors.qmd#mini.colors) was available.

- With [`:colorscheme`](https://neovim.io/doc/user/helptag.html?tag=:colorscheme) if [`g:colors_name`](https://neovim.io/doc/user/helptag.html?tag=g:colors_name) was available.

#### Parameters {#miniextra.pickers.colorschemes-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<names\></span> `(table)` - array of color scheme names to pick from.
    Default: all available color schemes.

  - <span class="help-syntax-keys">\<preview_hl_groups\></span> `(table)` - array of highlight groups to show in preview
    window. Default: all defined highlight groups in alphabetical order.


<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.colorschemes-return}


`(any)` Output of the called picker.

---

### pickers.commands() {#miniextra.pickers.commands}

<p align="center">`MiniExtra.pickers.commands`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim commands picker

Pick from Neovim built-in ([`Ex-commands`](https://neovim.io/doc/user/helptag.html?tag=Ex-commands)) and [`user-commands`](https://neovim.io/doc/user/helptag.html?tag=user-commands).
Notes:

- Preview shows information about the command (if available).

- Choosing either executes command (if reliably known that it doesn't need
  arguments) or populates Command line with the command.

#### Parameters {#miniextra.pickers.commands-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Not used at the moment.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.commands-return}


`(any)` Output of the called picker.

---

### pickers.diagnostic() {#miniextra.pickers.diagnostic}

<p align="center">`MiniExtra.pickers.diagnostic`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Built-in diagnostic picker

Pick from [`vim.diagnostic`](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic) using [`vim.diagnostic.get()`](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic.get\(\)).

#### Parameters {#miniextra.pickers.diagnostic-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<get_opts\></span> `(table)` - options for [`vim.diagnostic.get()`](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic.get\(\)). Can be used
    to limit severity or namespace. Default: `{}`.

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - one of "all" (available) or "current" (buffer).
    Default: "all".

  - <span class="help-syntax-keys">\<sort_by\></span> `(string)` - sort priority. One of "severity", "path", "none".
    Default: "severity".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.diagnostic-return}


`(any)` Output of the called picker.

---

### pickers.explorer() {#miniextra.pickers.explorer}

<p align="center">`MiniExtra.pickers.explorer`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
File explorer picker

Explore file system and open file.
Notes:

- Choosing a directory navigates inside it, changing picker's items and
  current working directory.

- Query and preview work as usual (not only `move_next`/`move_prev` can be used).

- Preview works for any item.

Examples:


- `MiniExtra.pickers.explorer()`

- `:Pick explorer cwd='..'` - open explorer in parent directory.

#### Parameters {#miniextra.pickers.explorer-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<cwd\></span> `(string)` - initial directory to explore. Should be a valid
    directory path. Default: `nil` for [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

  - <span class="help-syntax-keys">\<filter\></span> `(function)` - callable predicate to filter items to show.
    Will be called for every item and should return `true` if it should be
    shown. Each item is a table with the following fields:

      - <span class="help-syntax-keys">\<fs_type\></span> `(string)` - path type. One of "directory" or "file".

      - <span class="help-syntax-keys">\<path\></span> `(string)` - item path.

      - <span class="help-syntax-keys">\<text\></span> `(string)` - shown text (path's basename).

  - <span class="help-syntax-keys">\<sort\></span> `(function)` - callable item sorter. Will be called with array
    of items (each element with structure as described above) and should
    return sorted array of items.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.explorer-return}


`(any)` Output of the called picker.

---

### pickers.git_branches() {#miniextra.pickers.git_branches}

<p align="center">`MiniExtra.pickers.git_branches`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Git branches picker

Pick from Git branches using `git branch`.
Notes:

- Requires executable `git`.

- Requires target path to be part of git repository.

- Present for exploration and navigation purposes. Doing any Git operations
  is suggested to be done in a dedicated Git client and is not planned.

- On choose opens scratch buffer with branch's history.

Examples:


- `MiniExtra.pickers.git_branches({ scope = 'local' })` - local branches of
  the [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory) parent Git repository.

- `:Pick git_branches path='%'` - all branches of the current file parent
  Git repository.

#### Parameters {#miniextra.pickers.git_branches-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<path\></span> `(string|nil)` - target path for Git operation (if required). Also
    used to find Git repository inside which to construct items.
    Default: `nil` for root of Git repository containing [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - branch scope to show. One of "all", "local", "remotes".
    Default: "all".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.git_branches-return}


`(any)` Output of the called picker.

---

### pickers.git_commits() {#miniextra.pickers.git_commits}

<p align="center">`MiniExtra.pickers.git_commits`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Git commits picker

Pick from Git commits using `git log`.
Notes:

- Requires executable `git`.

- Requires target path to be part of git repository.

- Present for exploration and navigation purposes. Doing any Git operations
  is suggested to be done in a dedicated Git client and is not planned.

- On choose opens scratch buffer with commit's diff.

Examples:


- `MiniExtra.pickers.git_commits()` - all commits from parent Git
  repository of [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

- `MiniExtra.pickers.git_commits({ path = 'subdir' })` - commits affecting
  files from 'subdir' subdirectory.

- `:Pick git_commits path='%'` commits affecting current file.

#### Parameters {#miniextra.pickers.git_commits-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<path\></span> `(string|nil)` - target path for Git operation (if required). Also
    used to find Git repository inside which to construct items.
    Default: `nil` for root of Git repository containing [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.git_commits-return}


`(any)` Output of the called picker.

---

### pickers.git_files() {#miniextra.pickers.git_files}

<p align="center">`MiniExtra.pickers.git_files`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Git files picker

Pick from Git files using `git ls-files`.
Notes:

- Requires executable `git`.

- Requires target path to be part of git repository.

- Present for exploration and navigation purposes. Doing any Git operations
  is suggested to be done in a dedicated Git client and is not planned.

Examples:


- `MiniExtra.pickers.git_files({ scope = 'ignored' })` - ignored files from
  parent Git repository of [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

- `:Pick git_files path='subdir' scope='modified'` - files from 'subdir'
  subdirectory which are ignored by Git.

#### Parameters {#miniextra.pickers.git_files-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<path\></span> `(string|nil)` - target path for Git operation (if required). Also
    used to find Git repository inside which to construct items.
    Default: `nil` for root of Git repository containing [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - files scope to show. One of

      - "tracked"   (`--cached`   Git flag).

      - "modified"  (`--modified` Git flag).

      - "untracked" (`--others`   Git flag).

      - "ignored"   (`--ignored`  Git flag).

      - "deleted"   (`--deleted`  Git flag).
    Default: "tracked".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.git_files-return}


`(any)` Output of the called picker.

---

### pickers.git_hunks() {#miniextra.pickers.git_hunks}

<p align="center">`MiniExtra.pickers.git_hunks`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Git hunks picker

Pick from Git hunks using `git diff`.
Notes:

- Requires executable `git`.

- Requires target path to be part of git repository.

- Present for exploration and navigation purposes. Doing any Git operations
  is suggested to be done in a dedicated Git client and is not planned.

- On choose navigates to hunk's first change.

Examples:


- `MiniExtra.pickers.git_hunks({ scope = 'staged' })` - staged hunks from
  parent Git repository of [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

- `:Pick git_hunks path='%' n_context=0` - hunks from current file computed
  with no context.

#### Parameters {#miniextra.pickers.git_hunks-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<n_context\></span> `(number)` - number of context lines to show in hunk's preview.
    Default: 3.

  - <span class="help-syntax-keys">\<path\></span> `(string|nil)` - target path for Git operation (if required). Also
    used to find Git repository inside which to construct items.
    Default: `nil` for root of Git repository containing [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - hunks scope to show. One of "unstaged" or "staged".
    Default: "unstaged".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.git_hunks-return}


`(any)` Output of the called picker.

---

### pickers.hipatterns() {#miniextra.pickers.hipatterns}

<p align="center">`MiniExtra.pickers.hipatterns`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Matches from 'mini.hipatterns' picker

Pick from [`mini.hipatterns`](mini-hipatterns.qmd#mini.hipatterns) matches using [`MiniHipatterns.get_matches()`](mini-hipatterns.qmd#minihipatterns.get_matches).
Notes:

- Requires 'mini.hipatterns'.

- Highlighter identifier is highlighted with its highlight group.

#### Parameters {#miniextra.pickers.hipatterns-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - one of "all" (buffers with enabled 'mini.hipatterns')
    or "current" (buffer). Default: "all".

  - <span class="help-syntax-keys">\<highlighters\></span> `(table|nil)` - highlighters for which to find matches.
    Forwarded to [`MiniHipatterns.get_matches()`](mini-hipatterns.qmd#minihipatterns.get_matches). Default: `nil`.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.hipatterns-return}


`(any)` Output of the called picker.

---

### pickers.history() {#miniextra.pickers.history}

<p align="center">`MiniExtra.pickers.history`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim history picker

Pick from output of [`:history`](https://neovim.io/doc/user/helptag.html?tag=:history). Use `<C-e>` to edit current match in
Command line.

Notes:

- Has no preview.

- Choosing action depends on scope:

    - For "cmd" / ":" scopes, the command is executed.

    - For "search" / "/" / "?" scopes, search is redone.

    - For other scopes nothing is done (but chosen item is still returned).

- `<C-e>` only works for "cmd" / ":" / "search" / "/" / "?" scopes.

Examples:


- Command history: `MiniExtra.pickers.history({ scope = ':' })`

- Search history: `:Pick history scope='/'`

#### Parameters {#miniextra.pickers.history-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - any allowed {name} flag of [`:history`](https://neovim.io/doc/user/helptag.html?tag=:history) command.
    Note: word abbreviations are not allowed. Default: "all".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.history-return}


`(any)` Output of the called picker.

---

### pickers.hl_groups() {#miniextra.pickers.hl_groups}

<p align="center">`MiniExtra.pickers.hl_groups`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Highlight groups picker

Pick and preview highlight groups.
Notes:

- Item line is colored with same highlight group it represents.

- Preview shows highlight's definition (as in [`:highlight`](https://neovim.io/doc/user/helptag.html?tag=:highlight) with <span class="help-syntax-special">{group-name}</span>).

- Choosing places highlight definition in Command line to update and apply.

#### Parameters {#miniextra.pickers.hl_groups-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Not used at the moment.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.hl_groups-return}


`(any)` Output of the called picker.

---

### pickers.keymaps() {#miniextra.pickers.keymaps}

<p align="center">`MiniExtra.pickers.keymaps`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim keymaps picker

Pick and preview data about Neovim keymaps.
Notes:

- Item line contains data about keymap mode, whether it is buffer local, its
  left hand side, and inferred description.

- Preview shows keymap data or callback source (if present and reachable).

- Choosing emulates pressing the left hand side of the keymap.

#### Parameters {#miniextra.pickers.keymaps-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<mode\></span> `(string)` - modes to show. One of "all" or appropriate mode
    for [`nvim_set_keymap()`](https://neovim.io/doc/user/helptag.html?tag=nvim_set_keymap\(\)). Default: "all".

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - scope to show. One of "all", "global", "buf".
    Default: "all".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.keymaps-return}


`(any)` Output of the called picker.

---

### pickers.list() {#miniextra.pickers.list}

<p align="center">`MiniExtra.pickers.list`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim lists picker

Pick and navigate to elements of the following Neovim lists:

- [`quickfix`](https://neovim.io/doc/user/helptag.html?tag=quickfix) list.

- [`location-list`](https://neovim.io/doc/user/helptag.html?tag=location-list) of current window.

- [`jumplist`](https://neovim.io/doc/user/helptag.html?tag=jumplist).

- [`changelist`](https://neovim.io/doc/user/helptag.html?tag=changelist).

Note: it requires explicit `scope`.

Examples:


- `MiniExtra.pickers.list({ scope = 'quickfix' })` - quickfix list.

- `:Pick list scope='jump'` - jump list.

#### Parameters {#miniextra.pickers.list-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - type of list to show. One of "quickfix", "location",
    "jump", "change". Default: `nil` which means explicit scope is needed.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.list-return}


`(any)` Output of the called picker.

---

### pickers.lsp() {#miniextra.pickers.lsp}

<p align="center">`MiniExtra.pickers.lsp`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
LSP picker

Pick and navigate with LSP methods.
Notes:

- Needs an explicit scope from a list of supported ones:

    - "declaration".

    - "definition".

    - "document_symbol".

    - "implementation".

    - "references".

    - "type_definition".

    - "workspace_symbol".

- Relies on `vim.lsp.buf` methods supporting [`vim.lsp.LocationOpts.OnList`](https://neovim.io/doc/user/helptag.html?tag=vim.lsp.LocationOpts.OnList).
  In particular, it means that picker is started only if LSP server returns
  list of locations and not a single location.

- Doesn't return anything due to async nature of `vim.lsp.buf` methods.

- Requires set up [`mini.icons`](mini-icons.qmd#mini.icons) to show extra icons and highlighting in
  "document_symbol" and "workspace_symbol" scopes.

Examples:


- `MiniExtra.pickers.lsp({ scope = 'references' })` - references of the symbol
  under cursor.

- `:Pick lsp scope='document_symbol'` - symbols in current file.

#### Parameters {#miniextra.pickers.lsp-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - LSP method to use. One of the supported ones (see
    list above). Default: `nil` which means explicit scope is needed.

  - <span class="help-syntax-keys">\<symbol_query\></span> `(string)` - query for [`vim.lsp.buf.workspace_symbol()`](https://neovim.io/doc/user/helptag.html?tag=vim.lsp.buf.workspace_symbol\(\)).
    Default: empty string for all symbols (according to LSP specification).

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.lsp-return}


`(nil)` Nothing is returned.

---

### pickers.marks() {#miniextra.pickers.marks}

<p align="center">`MiniExtra.pickers.marks`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim marks picker

Pick and preview position of Neovim [`mark`](https://neovim.io/doc/user/helptag.html?tag=mark)s.

#### Parameters {#miniextra.pickers.marks-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - scope to show. One of "all", "global", "buf".
    Default: "all".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.marks-return}


`(any)` Output of the called picker.

---

### pickers.oldfiles() {#miniextra.pickers.oldfiles}

<p align="center">`MiniExtra.pickers.oldfiles`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Old files picker

Pick from [`v:oldfiles`](https://neovim.io/doc/user/helptag.html?tag=v:oldfiles) entries representing readable files.

#### Parameters {#miniextra.pickers.oldfiles-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<current_dir\></span> `(boolean)` - whether to return files only from current
    working directory and its subdirectories. Default: `false`.

  - <span class="help-syntax-keys">\<preserve_order\></span> `(boolean)` - whether to preserve original order
    during query. Default: `false`.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.oldfiles-return}


`(any)` Output of the called picker.

---

### pickers.options() {#miniextra.pickers.options}

<p align="center">`MiniExtra.pickers.options`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim options picker

Pick and preview data about Neovim options.
Notes:

- Item line is colored based on whether it was set (dimmed if wasn't).

- Preview shows option value in target window and its general information.

- Choosing places option name in Command line to update and apply.

#### Parameters {#miniextra.pickers.options-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - options to show. One of "all", "global", "win", "buf".
    Default: "all".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.options-return}


`(any)` Output of the called picker.

---

### pickers.registers() {#miniextra.pickers.registers}

<p align="center">`MiniExtra.pickers.registers`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim registers picker

Pick from Neovim [`registers`](https://neovim.io/doc/user/helptag.html?tag=registers).
Notes:

- There is no preview (all information is in the item's text).

- Choosing pastes content of a register: with [`i_CTRL-R`](https://neovim.io/doc/user/helptag.html?tag=i_CTRL-R) in Insert mode,
  [`c_CTRL-R`](https://neovim.io/doc/user/helptag.html?tag=c_CTRL-R) in Command-line mode, and [`P`](https://neovim.io/doc/user/helptag.html?tag=P) otherwise.
  Expression register [`quote=`](https://neovim.io/doc/user/helptag.html?tag=quote=) is reevaluated (if present) and pasted.

#### Parameters {#miniextra.pickers.registers-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Not used at the moment.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.registers-return}


`(any)` Output of the called picker.

---

### pickers.spellsuggest() {#miniextra.pickers.spellsuggest}

<p align="center">`MiniExtra.pickers.spellsuggest`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Neovim spell suggestions picker

Pick and apply spell suggestions.
Notes:

- No preview is available.

- Choosing replaces current word ([`<cword>`](https://neovim.io/doc/user/helptag.html?tag=<cword>)) with suggestion.

#### Parameters {#miniextra.pickers.spellsuggest-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<n_suggestions\></span> `(number)` - number of spell suggestions. Default: 25.


<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.spellsuggest-return}


`(any)` Output of the called picker.

---

### pickers.treesitter() {#miniextra.pickers.treesitter}

<p align="center">`MiniExtra.pickers.treesitter`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Tree-sitter nodes picker

Pick and navigate to [`treesitter`](https://neovim.io/doc/user/helptag.html?tag=treesitter) nodes of current buffer.
Notes:

- Requires active tree-sitter parser in the current buffer.

#### Parameters {#miniextra.pickers.treesitter-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Not used at the moment.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.treesitter-return}


`(any)` Output of the called picker.

---

### pickers.visit_paths() {#miniextra.pickers.visit_paths}

<p align="center">`MiniExtra.pickers.visit_paths`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Visit paths from 'mini.visits' picker

Pick paths from [`mini.visits`](mini-visits.qmd#mini.visits) using [`MiniVisits.list_paths()`](mini-visits.qmd#minivisits.list_paths).
Notes:

- Requires 'mini.visits'.

Examples:


- `MiniExtra.pickers.visit_paths()` - visits registered for [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory)
  and ordered by "robust frecency".

- `:Pick visit_paths cwd='' recency_weight=1 filter='core'` - all visits with
  "core" label ordered from most to least recent.

#### Parameters {#miniextra.pickers.visit_paths-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<cwd\></span> `(string)` - forwarded to [`MiniVisits.list_paths()`](mini-visits.qmd#minivisits.list_paths).
    Default: `nil` to get paths registered for [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

  - <span class="help-syntax-keys">\<filter\></span> `(function|string)` - forwarded to [`MiniVisits.list_paths()`](mini-visits.qmd#minivisits.list_paths).
    Default: `nil` to use all paths.

  - <span class="help-syntax-keys">\<preserve_order\></span> `(boolean)` - whether to preserve original order
    during query. Default: `false`.

  - <span class="help-syntax-keys">\<recency_weight\></span> `(number)` - forwarded to [`MiniVisits.gen_sort.default()`](mini-visits.qmd#minivisits.gen_sort.default).
    Default: 0.5 to use "robust frecency" sorting.

  - <span class="help-syntax-keys">\<sort\></span> `(function)` - forwarded to [`MiniVisits.list_paths()`](mini-visits.qmd#minivisits.list_paths).
    Default: `nil` to use "robust frecency".
    Note: if supplied, has precedence over `recency_weight`.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.visit_paths-return}


`(any)` Output of the called picker.

---

### pickers.visit_labels() {#miniextra.pickers.visit_labels}

<p align="center">`MiniExtra.pickers.visit_labels`(<span class="help-syntax-special">{local_opts}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Visit labels from 'mini.visits' picker

Pick labels from [`mini.visits`](mini-visits.qmd#mini.visits) using [`MiniVisits.list_labels()`](mini-visits.qmd#minivisits.list_labels)
and [`MiniVisits.list_paths()`](mini-visits.qmd#minivisits.list_paths).
Notes:

- Requires 'mini.visits'.

- Preview shows target visit paths filtered to those having previewed label.

- Choosing essentially starts [`MiniExtra.pickers.visit_paths()`](mini-extra.qmd#miniextra.pickers.visit_paths) for paths
  with the chosen label.

Examples:


- `MiniExtra.pickers.visit_labels()` - labels from visits registered
  for [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

- `:Pick visit_labels cwd=''` - labels from all visits.

#### Parameters {#miniextra.pickers.visit_labels-parameters}



<span class="help-syntax-special">{local_opts}</span> `(table|nil)` Options defining behavior of this particular picker.
  Possible fields:

  - <span class="help-syntax-keys">\<cwd\></span> `(string)` - forwarded to [`MiniVisits.list_labels()`](mini-visits.qmd#minivisits.list_labels).
    Default: `nil` to get labels from visits registered for [`current-directory`](https://neovim.io/doc/user/helptag.html?tag=current-directory).

  - <span class="help-syntax-keys">\<filter\></span> `(function|string)` - forwarded to [`MiniVisits.list_labels()`](mini-visits.qmd#minivisits.list_labels).
    Default: `nil` to use all visits.

  - <span class="help-syntax-keys">\<path\></span> `(string)` - forwarded to [`MiniVisits.list_labels()`](mini-visits.qmd#minivisits.list_labels).
    Default: `""` to get labels from all visits for target `cwd`.

  - <span class="help-syntax-keys">\<sort\></span> `(function)` - forwarded to [`MiniVisits.list_paths()`](mini-visits.qmd#minivisits.list_paths) for
    preview and choose. Default: `nil` to use "robust frecency".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options forwarded to [`MiniPick.start()`](mini-pick.qmd#minipick.start).

#### Return {#miniextra.pickers.visit_labels-return}


`(...)` Chosen path.

